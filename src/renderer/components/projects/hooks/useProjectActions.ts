'use client';

import { useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { Logger } from '../../../../shared/logger';

interface UseKeyboardShortcutsProps {
  saveProject: () => Promise<void>;
  toggleFocusMode: () => void;
  setShowHeader: (show: boolean) => void;
  isFocusMode: boolean;
}

export function useKeyboardShortcuts({
  saveProject,
  toggleFocusMode,
  setShowHeader,
  isFocusMode
}: UseKeyboardShortcutsProps): void {
  
  // üî• Ctrl+S Ï†ÄÏû• Î∞è ÏûêÎèô Ï†ÄÏû•
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent): void => {
      // Ctrl+S: Ï†ÄÏû•
      if ((event.ctrlKey || event.metaKey) && event.key === 's') {
        event.preventDefault();
        saveProject();
        Logger.debug('SHORTCUTS', 'Manual save triggered');
        return;
      }
      
      // Esc: Ìè¨Ïª§Ïä§ Î™®Îìú ÌÜ†Í∏Ä
      if (event.key === 'Escape') {
        toggleFocusMode();
        Logger.debug('SHORTCUTS', 'Focus mode toggled');
        return;
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    
    // ÎßàÏö∞Ïä§ ÏõÄÏßÅÏûÑ Í∞êÏßÄÌïòÏó¨ Ìó§Îçî ÌëúÏãú
    let timeout: NodeJS.Timeout;
    const handleMouseMove = (): void => {
      if (isFocusMode) {
        setShowHeader(true);
        clearTimeout(timeout);
        
        timeout = setTimeout(() => {
          setShowHeader(false);
        }, 3000);
      }
    };
    
    if (isFocusMode) {
      setShowHeader(false);
      document.addEventListener('mousemove', handleMouseMove);
    } else {
      setShowHeader(true);
      document.removeEventListener('mousemove', handleMouseMove);
    }
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('mousemove', handleMouseMove);
      clearTimeout(timeout);
    };
  }, [isFocusMode, saveProject, toggleFocusMode, setShowHeader]);
}

interface UseProjectActionsProps {
  projectId: string;
  saveProject: () => Promise<void>;
  title: string;
  content: string;
}

export function useProjectActions({
  projectId,
  saveProject,
  title,
  content
}: UseProjectActionsProps) {
  const router = useRouter();
  
  const handleBack = useCallback((): void => {
    Logger.info('PROJECT_ACTIONS', 'Navigating back to projects');
    saveProject().then(() => {
      router.push('/projects');
    });
  }, [router, saveProject]);
  
  const handleShare = useCallback((): void => {
    Logger.info('PROJECT_ACTIONS', 'Share project requested');
    // TODO: Ïã§Ï†ú Í≥µÏú† Í∏∞Îä• Íµ¨ÌòÑ
    alert('Í≥µÏú† Í∏∞Îä•ÏùÑ Íµ¨ÌòÑ Ï§ëÏûÖÎãàÎã§.');
  }, []);
  
  const handleDownload = useCallback((): void => {
    Logger.info('PROJECT_ACTIONS', 'Download project requested');
    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${title || 'ÌîÑÎ°úÏ†ùÌä∏'}.md`;
    a.click();
    URL.revokeObjectURL(url);
  }, [content, title]);

  return {
    handleBack,
    handleShare,
    handleDownload
  };
}
