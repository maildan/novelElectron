'use client';

import React from 'react';
import { 
  Bold, 
  Italic, 
  Strikethrough,
  Heading1,
  Heading2, 
  Heading3,
  Quote,
  List,
  ListOrdered,
  Link,
  ImageIcon,
  Eye,
  Columns,
  Maximize,
  Code
} from 'lucide-react';
import { Logger } from '../../../../shared/logger';

// üî• EasyMDE ÏóêÎîîÌÑ∞ ÌÉÄÏûÖ Ï†ïÏùò
interface EasyMDEEditor {
  codemirror: any;
  value(): string;
  value(val: string): void;
  togglePreview(): void;
  toggleSideBySide(): void;
  toggleFullScreen(): void;
}

interface EditorToolbarProps {
  editor: EasyMDEEditor | null;
}

// üî• ÌîÑÎ¶¨Ïª¥ÌååÏùºÎêú Ïä§ÌÉÄÏùº (Í∏∞Í∞ÄÏ∞®Îìú ÏõêÏπô)
const TOOLBAR_STYLES = {
  container: 'flex items-center gap-1 p-2 bg-white border-b border-gray-200 sticky top-0 z-20',
  button: 'p-2 rounded-md hover:bg-gray-100 transition-colors duration-200 flex items-center justify-center min-w-[36px] min-h-[36px]',
  buttonActive: 'p-2 rounded-md bg-blue-100 text-blue-600 flex items-center justify-center min-w-[36px] min-h-[36px]',
  separator: 'w-px h-6 bg-gray-300 mx-2',
  darkContainer: 'dark:bg-gray-800 dark:border-gray-700',
  darkButton: 'dark:hover:bg-gray-700 dark:text-gray-300',
  darkButtonActive: 'dark:bg-blue-900 dark:text-blue-400'
} as const;

// üî• Ìà¥Î∞î Ïï°ÏÖòÎì§ (EasyMDE Ìò∏Ìôò)
const toolbarActions = {
  bold: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const text = cm.getSelection();
    cm.replaceSelection(`**${text}**`);
    cm.focus();
  },
  
  italic: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const text = cm.getSelection();
    cm.replaceSelection(`*${text}*`);
    cm.focus();
  },
  
  strikethrough: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const text = cm.getSelection();
    cm.replaceSelection(`~~${text}~~`);
    cm.focus();
  },
  
  heading1: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const cursor = cm.getCursor();
    const line = cm.getLine(cursor.line);
    const newText = line.startsWith('# ') ? line.slice(2) : `# ${line}`;
    cm.replaceRange(newText, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
    cm.focus();
  },
  
  heading2: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const cursor = cm.getCursor();
    const line = cm.getLine(cursor.line);
    const newText = line.startsWith('## ') ? line.slice(3) : `## ${line}`;
    cm.replaceRange(newText, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
    cm.focus();
  },
  
  heading3: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const cursor = cm.getCursor();
    const line = cm.getLine(cursor.line);
    const newText = line.startsWith('### ') ? line.slice(4) : `### ${line}`;
    cm.replaceRange(newText, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
    cm.focus();
  },
  
  quote: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const text = cm.getSelection();
    if (text) {
      cm.replaceSelection(`> ${text}`);
    } else {
      const cursor = cm.getCursor();
      const line = cm.getLine(cursor.line);
      const newText = line.startsWith('> ') ? line.slice(2) : `> ${line}`;
      cm.replaceRange(newText, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
    }
    cm.focus();
  },
  
  unorderedList: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const cursor = cm.getCursor();
    const line = cm.getLine(cursor.line);
    const newText = line.startsWith('- ') ? line.slice(2) : `- ${line}`;
    cm.replaceRange(newText, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
    cm.focus();
  },
  
  orderedList: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const cursor = cm.getCursor();
    const line = cm.getLine(cursor.line);
    const newText = line.match(/^\d+\. /) ? line.replace(/^\d+\. /, '') : `1. ${line}`;
    cm.replaceRange(newText, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
    cm.focus();
  },
  
  link: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const text = cm.getSelection();
    cm.replaceSelection(`[${text || 'ÎßÅÌÅ¨ ÌÖçÏä§Ìä∏'}](https://)`);
    cm.focus();
  },
  
  image: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const text = cm.getSelection();
    cm.replaceSelection(`![${text || 'Ïù¥ÎØ∏ÏßÄ ÏÑ§Î™Ö'}](Ïù¥ÎØ∏ÏßÄ_URL)`);
    cm.focus();
  },
  
  code: (editor: EasyMDEEditor) => {
    const cm = editor.codemirror;
    const text = cm.getSelection();
    if (text.includes('\n')) {
      cm.replaceSelection(`\`\`\`\n${text}\n\`\`\``);
    } else {
      cm.replaceSelection(`\`${text}\``);
    }
    cm.focus();
  },
  
  preview: (editor: EasyMDEEditor) => {
    editor.togglePreview();
  },
  
  sideBySide: (editor: EasyMDEEditor) => {
    editor.toggleSideBySide();
  },
  
  fullscreen: (editor: EasyMDEEditor) => {
    editor.toggleFullScreen();
  }
};

export function EditorToolbar({ editor }: EditorToolbarProps): React.ReactElement {
  const handleAction = (actionName: string) => {
    if (!editor) return;
    
    try {
      const action = toolbarActions[actionName as keyof typeof toolbarActions];
      if (action) {
        action(editor);
        Logger.debug('EDITOR_TOOLBAR', `Action executed: ${actionName}`);
      }
    } catch (error) {
      Logger.error('EDITOR_TOOLBAR', `Failed to execute action: ${actionName}`, error);
    }
  };

  return (
    <div className={`${TOOLBAR_STYLES.container} ${TOOLBAR_STYLES.darkContainer}`}>
      {/* ÌÖçÏä§Ìä∏ Ïä§ÌÉÄÏùºÎßÅ */}
      <button
        onClick={() => handleAction('bold')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="ÍµµÍ≤å (Ctrl+B)"
        aria-label="ÍµµÍ≤å"
      >
        <Bold size={16} />
      </button>
      
      <button
        onClick={() => handleAction('italic')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Í∏∞Ïö∏ÏûÑ (Ctrl+I)"
        aria-label="Í∏∞Ïö∏ÏûÑ"
      >
        <Italic size={16} />
      </button>
      
      <button
        onClick={() => handleAction('strikethrough')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Ï∑®ÏÜåÏÑ†"
        aria-label="Ï∑®ÏÜåÏÑ†"
      >
        <Strikethrough size={16} />
      </button>
      
      <div className={TOOLBAR_STYLES.separator} />
      
      {/* Ï†úÎ™© */}
      <button
        onClick={() => handleAction('heading1')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Ï†úÎ™© 1"
        aria-label="Ï†úÎ™© 1"
      >
        <Heading1 size={16} />
      </button>
      
      <button
        onClick={() => handleAction('heading2')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Ï†úÎ™© 2"
        aria-label="Ï†úÎ™© 2"
      >
        <Heading2 size={16} />
      </button>
      
      <button
        onClick={() => handleAction('heading3')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Ï†úÎ™© 3"
        aria-label="Ï†úÎ™© 3"
      >
        <Heading3 size={16} />
      </button>
      
      <div className={TOOLBAR_STYLES.separator} />
      
      {/* Î∏îÎ°ù ÏöîÏÜå */}
      <button
        onClick={() => handleAction('quote')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Ïù∏Ïö©"
        aria-label="Ïù∏Ïö©"
      >
        <Quote size={16} />
      </button>
      
      <button
        onClick={() => handleAction('unorderedList')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Í∏ÄÎ®∏Î¶¨ Í∏∞Ìò∏ Î™©Î°ù"
        aria-label="Í∏ÄÎ®∏Î¶¨ Í∏∞Ìò∏ Î™©Î°ù"
      >
        <List size={16} />
      </button>
      
      <button
        onClick={() => handleAction('orderedList')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Î≤àÌò∏ Î™©Î°ù"
        aria-label="Î≤àÌò∏ Î™©Î°ù"
      >
        <ListOrdered size={16} />
      </button>
      
      <button
        onClick={() => handleAction('code')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="ÏΩîÎìú"
        aria-label="ÏΩîÎìú"
      >
        <Code size={16} />
      </button>
      
      <div className={TOOLBAR_STYLES.separator} />
      
      {/* ÎØ∏ÎîîÏñ¥ */}
      <button
        onClick={() => handleAction('link')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="ÎßÅÌÅ¨ (Ctrl+K)"
        aria-label="ÎßÅÌÅ¨"
      >
        <Link size={16} />
      </button>
      
      <button
        onClick={() => handleAction('image')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Ïù¥ÎØ∏ÏßÄ"
        aria-label="Ïù¥ÎØ∏ÏßÄ"
      >
        <ImageIcon size={16} />
      </button>
      
      <div className={TOOLBAR_STYLES.separator} />
      
      {/* Î∑∞ Î™®Îìú */}
      <button
        onClick={() => handleAction('preview')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="ÎØ∏Î¶¨Î≥¥Í∏∞ (Ctrl+P)"
        aria-label="ÎØ∏Î¶¨Î≥¥Í∏∞"
      >
        <Eye size={16} />
      </button>
      
      <button
        onClick={() => handleAction('sideBySide')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="ÎÇòÎûÄÌûà Î≥¥Í∏∞ (F9)"
        aria-label="ÎÇòÎûÄÌûà Î≥¥Í∏∞"
      >
        <Columns size={16} />
      </button>
      
      <button
        onClick={() => handleAction('fullscreen')}
        className={`${TOOLBAR_STYLES.button} ${TOOLBAR_STYLES.darkButton}`}
        title="Ï†ÑÏ≤¥ÌôîÎ©¥ (F11)"
        aria-label="Ï†ÑÏ≤¥ÌôîÎ©¥"
      >
        <Maximize size={16} />
      </button>
    </div>
  );
}
