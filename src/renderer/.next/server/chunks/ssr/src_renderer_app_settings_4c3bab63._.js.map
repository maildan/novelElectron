{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/constants/styles.ts"],"sourcesContent":["'use client';\n\n// 🔥 기가차드 Settings 스타일 상수 - 프리컴파일된 Tailwind CSS 클래스\n\n/**\n * 🎨 Settings 페이지 스타일 상수 (메모이제이션 최적화)\n * - 모든 스타일을 미리 정의하여 런타임 성능 최적화\n * - 조건부 스타일링 방지로 리렌더링 감소\n */\nexport const SETTINGS_PAGE_STYLES = {\n  // 메인 컨테이너\n  container: 'container mx-auto px-4 py-6 max-w-4xl space-y-6',\n  pageTitle: 'text-3xl font-bold text-slate-900 dark:text-slate-100 mb-6',\n  \n  // 네비게이션\n  nav: 'flex flex-wrap gap-2 mb-6',\n  navButton: 'px-4 py-2 rounded-lg text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500',\n  navButtonActive: 'bg-blue-600 text-white shadow-md',\n  navButtonInactive: 'bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700',\n  \n  // 섹션\n  section: 'space-y-6',\n  sectionCard: 'bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6',\n  sectionHeader: 'flex items-center gap-3 mb-4 pb-3 border-b border-slate-200 dark:border-slate-700',\n  sectionIcon: 'w-6 h-6 text-blue-600 flex-shrink-0',\n  sectionTitle: 'text-xl font-semibold text-slate-900 dark:text-slate-100',\n  sectionDescription: 'text-sm text-slate-600 dark:text-slate-400 mt-1',\n  \n  // 설정 항목\n  settingItem: 'space-y-4',\n  settingRow: 'flex items-center justify-between py-3 border-b border-slate-200 dark:border-slate-700 last:border-b-0 min-h-[60px]',\n  settingLabel: 'flex-1 pr-4',\n  settingTitle: 'font-medium text-slate-900 dark:text-slate-100 text-base',\n  settingDescription: 'text-sm text-slate-600 dark:text-slate-400 mt-1 max-w-md',\n  settingControl: 'flex items-center gap-3 flex-shrink-0',\n  \n  // 입력 필드\n  inputGroup: 'space-y-2',\n  inputLabel: 'text-sm font-medium text-slate-700 dark:text-slate-300',\n  textInput: 'w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 transition-colors',\n  numberInput: 'w-24 px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 transition-colors',\n  select: 'px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 min-w-[120px] transition-colors',\n  \n  // 체크박스 및 토글\n  checkbox: 'w-4 h-4 text-blue-600 bg-white border-slate-300 rounded focus:ring-blue-500 focus:ring-2 dark:bg-slate-700 dark:border-slate-600 transition-colors',\n  toggle: 'relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer',\n  toggleActive: 'bg-blue-600',\n  toggleInactive: 'bg-slate-200 dark:bg-slate-600',\n  toggleSwitch: 'inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-200 ease-in-out shadow-sm',\n  toggleSwitchActive: 'translate-x-6',\n  toggleSwitchInactive: 'translate-x-1',\n  toggleDisabled: 'opacity-50 cursor-not-allowed',\n  \n  // 액션 버튼\n  actions: 'flex justify-end gap-3 pt-6 border-t border-slate-200 dark:border-slate-700',\n  button: 'inline-flex items-center px-4 py-2 rounded-lg font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed',\n  primaryButton: 'bg-blue-600 hover:bg-blue-700 text-white shadow-md hover:shadow-lg focus:ring-blue-500',\n  secondaryButton: 'bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 text-slate-700 dark:text-slate-300 focus:ring-slate-500',\n  dangerButton: 'bg-red-600 hover:bg-red-700 text-white shadow-md hover:shadow-lg focus:ring-red-500',\n  \n  // 로딩 상태\n  loading: 'flex items-center justify-center h-64',\n  loadingContent: 'text-center',\n  spinner: 'animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4',\n  loadingText: 'text-slate-600 dark:text-slate-400',\n  loadingContainer: 'flex items-center justify-center h-64',\n  loadingSpinner: 'animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4',\n  \n  // 에러 상태\n  errorContainer: 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4',\n  errorText: 'text-red-800 dark:text-red-400 text-sm',\n  \n  // 성공 상태\n  successContainer: 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4',\n  successText: 'text-green-800 dark:text-green-400 text-sm',\n  \n  // 유틸리티\n  srOnly: 'sr-only',\n  visuallyHidden: 'absolute w-px h-px p-0 -m-px overflow-hidden clip-[rect(0,0,0,0)] whitespace-nowrap border-0',\n} as const;\n\n/**\n * 🔥 아이콘 크기 상수\n */\nexport const ICON_SIZES = {\n  xs: 'w-3 h-3',\n  sm: 'w-4 h-4',\n  md: 'w-5 h-5',\n  lg: 'w-6 h-6',\n  xl: 'w-8 h-8',\n} as const;\n\n/**\n * 🔥 간격 상수\n */\nexport const SPACING = {\n  xs: 'gap-1',\n  sm: 'gap-2',\n  md: 'gap-3',\n  lg: 'gap-4',\n  xl: 'gap-6',\n} as const;\n"],"names":[],"mappings":";;;;;AAAA;AASO,MAAM,uBAAuB;IAClC,UAAU;IACV,WAAW;IACX,WAAW;IAEX,QAAQ;IACR,KAAK;IACL,WAAW;IACX,iBAAiB;IACjB,mBAAmB;IAEnB,KAAK;IACL,SAAS;IACT,aAAa;IACb,eAAe;IACf,aAAa;IACb,cAAc;IACd,oBAAoB;IAEpB,QAAQ;IACR,aAAa;IACb,YAAY;IACZ,cAAc;IACd,cAAc;IACd,oBAAoB;IACpB,gBAAgB;IAEhB,QAAQ;IACR,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,aAAa;IACb,QAAQ;IAER,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,cAAc;IACd,gBAAgB;IAChB,cAAc;IACd,oBAAoB;IACpB,sBAAsB;IACtB,gBAAgB;IAEhB,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,eAAe;IACf,iBAAiB;IACjB,cAAc;IAEd,QAAQ;IACR,SAAS;IACT,gBAAgB;IAChB,SAAS;IACT,aAAa;IACb,kBAAkB;IAClB,gBAAgB;IAEhB,QAAQ;IACR,gBAAgB;IAChB,WAAW;IAEX,QAAQ;IACR,kBAAkB;IAClB,aAAa;IAEb,OAAO;IACP,QAAQ;IACR,gBAAgB;AAClB;AAKO,MAAM,aAAa;IACxB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;AACN;AAKO,MAAM,UAAU;IACrB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;AACN","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/hooks/useSettings.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { Logger } from '../../../../shared/logger';\nimport type { SettingsData, UseSettingsReturn } from '../types';\n\n// 🔥 기가차드 useSettings 훅 - Electron-Store 완벽 호환!\n\n/**\n * 🔥 Settings 관리를 위한 커스텀 훅\n * - main/settings/ElectronStoreSettingsManager와 완벽 호환\n * - IPC 통신을 통한 설정 관리\n * - 타입 안전한 설정 업데이트\n * - 성능 최적화된 상태 관리\n */\nexport function useSettings(): UseSettingsReturn {\n  const [settings, setSettings] = useState<SettingsData | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // 🔥 중복 요청 방지를 위한 ref\n  const loadingRef = useRef<boolean>(false);\n  const savingRef = useRef<boolean>(false);\n\n  /**\n   * 🔥 기본값 정의 (main/settings와 동일)\n   */\n  const defaultSettings: SettingsData = {\n    app: {\n      theme: 'system',\n      language: 'ko',\n      autoSave: true,\n      startMinimized: false,\n      minimizeToTray: true,\n      fontSize: 14,\n      fontFamily: 'Pretendard, -apple-system, BlinkMacSystemFont, system-ui, sans-serif',\n    },\n    keyboard: {\n      enabled: true,\n      language: 'korean',\n      trackAllApps: false,\n      sessionTimeout: 30,\n    },\n    ui: {\n      windowWidth: 1400,\n      windowHeight: 900,\n      sidebarCollapsed: false,\n      focusMode: false,\n      showLineNumbers: true,\n      showWordCount: true,\n    },\n    performance: {\n      enableGPUAcceleration: true,\n      maxCPUUsage: 80,\n      maxMemoryUsage: 2048,\n      enableHardwareAcceleration: true,\n    },\n  };\n\n  /**\n   * 🔥 설정 로드 (중복 방지)\n   */\n  const loadSettings = useCallback(async (): Promise<void> => {\n    if (loadingRef.current) return;\n    \n    try {\n      loadingRef.current = true;\n      setLoading(true);\n      setError(null);\n      \n      Logger.debug('USE_SETTINGS', 'Loading settings from main process');\n      \n      const result = await window.electronAPI.settings.get('all');\n      \n      if (result.success && result.data) {\n        setSettings(result.data as SettingsData);\n        Logger.info('USE_SETTINGS', 'Settings loaded successfully', result.data);\n      } else {\n        Logger.warn('USE_SETTINGS', 'Failed to load settings, using defaults', result.error);\n        setSettings(defaultSettings);\n        setError('기본 설정을 사용합니다.');\n      }\n    } catch (error) {\n      Logger.error('USE_SETTINGS', 'Error loading settings', error);\n      setSettings(defaultSettings);\n      setError(error instanceof Error ? error.message : '설정 로드 중 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n      loadingRef.current = false;\n    }\n  }, []);\n\n  /**\n   * 🔥 설정 업데이트 (타입 안전)\n   */\n  const updateSetting = useCallback(async <K extends keyof SettingsData, T extends keyof SettingsData[K]>(\n    category: K,\n    key: T,\n    value: SettingsData[K][T]\n  ): Promise<void> => {\n    if (!settings || savingRef.current) return;\n\n    try {\n      setSaving(true);\n      \n      // 🔥 즉시 UI 업데이트 (낙관적 업데이트)\n      setSettings(prev => {\n        if (!prev) return null;\n        \n        return {\n          ...prev,\n          [category]: {\n            ...prev[category],\n            [key]: value,\n          },\n        };\n      });\n\n      // 🔥 백엔드에 저장 (dot notation 사용)\n      const keyPath = `${category}.${String(key)}`;\n      Logger.debug('USE_SETTINGS', `Updating setting: ${keyPath}`, { value });\n      \n      const result = await window.electronAPI.settings.set(keyPath, value);\n      \n      if (result.success) {\n        Logger.info('USE_SETTINGS', `Setting updated successfully: ${keyPath}`, { value });\n      } else {\n        throw new Error(result.error || `Failed to save ${keyPath}`);\n      }\n    } catch (error) {\n      Logger.error('USE_SETTINGS', `Error updating setting: ${category}.${String(key)}`, error);\n      \n      // 🔥 에러 시 롤백\n      await loadSettings();\n      setError(`설정 저장 실패: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n    } finally {\n      setSaving(false);\n    }\n  }, [settings, loadSettings]);\n\n  /**\n   * 🔥 모든 설정 저장\n   */\n  const saveAllSettings = useCallback(async (): Promise<void> => {\n    if (!settings || savingRef.current) return;\n\n    try {\n      savingRef.current = true;\n      setSaving(true);\n      setError(null);\n      \n      Logger.info('USE_SETTINGS', 'Saving all settings...');\n      \n      // 🔥 각 카테고리별로 저장\n      for (const [category, categoryData] of Object.entries(settings)) {\n        const result = await window.electronAPI.settings.set(category, categoryData);\n        if (!result.success) {\n          throw new Error(`Failed to save ${category} settings: ${result.error}`);\n        }\n      }\n      \n      Logger.info('USE_SETTINGS', 'All settings saved successfully');\n    } catch (error) {\n      Logger.error('USE_SETTINGS', 'Failed to save all settings', error);\n      setError(`전체 설정 저장 실패: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n    } finally {\n      setSaving(false);\n      savingRef.current = false;\n    }\n  }, [settings]);\n\n  /**\n   * 🔥 설정 리셋\n   */\n  const resetSettings = useCallback(async (): Promise<void> => {\n    if (savingRef.current) return;\n\n    try {\n      savingRef.current = true;\n      setSaving(true);\n      setError(null);\n      \n      Logger.info('USE_SETTINGS', 'Resetting all settings...');\n      \n      const result = await window.electronAPI.settings.reset();\n      \n      if (result.success) {\n        // 🔥 성공 시 기본값으로 설정하고 다시 로드\n        setSettings(defaultSettings);\n        await loadSettings();\n        Logger.info('USE_SETTINGS', 'Settings reset successfully');\n      } else {\n        throw new Error(result.error || 'Failed to reset settings');\n      }\n    } catch (error) {\n      Logger.error('USE_SETTINGS', 'Failed to reset settings', error);\n      setError(`설정 초기화 실패: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);\n    } finally {\n      setSaving(false);\n      savingRef.current = false;\n    }\n  }, [loadSettings]);\n\n  /**\n   * 🔥 초기 설정 로드\n   */\n  useEffect(() => {\n    loadSettings();\n  }, [loadSettings]);\n\n  /**\n   * 🔥 에러 자동 클리어 (10초 후)\n   */\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        setError(null);\n      }, 10000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  return {\n    settings,\n    loading,\n    saving,\n    error,\n    updateSetting,\n    saveAllSettings,\n    resetSettings,\n    setSettings,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/SettingsNavigation.tsx"],"sourcesContent":["// 🔥 기가차드 설정 네비게이션 컴포넌트 - 최적화\n'use client';\n\nimport React, { useCallback } from 'react';\nimport { Settings, Keyboard, Palette, Cpu } from 'lucide-react';\nimport { SETTINGS_PAGE_STYLES } from '../constants/styles';\nimport type { SettingSection, SettingSectionMeta } from '../types';\n\n/**\n * 🔥 설정 섹션 메타데이터\n */\nconst SETTING_SECTIONS: SettingSectionMeta[] = [\n  { id: 'app', label: '앱 설정', icon: Settings },\n  { id: 'keyboard', label: '키보드', icon: Keyboard },\n  { id: 'ui', label: 'UI/UX', icon: Palette },\n  { id: 'performance', label: '성능', icon: Cpu },\n];\n\n/**\n * 🔥 설정 네비게이션 Props\n */\ninterface SettingsNavigationProps {\n  activeSection: SettingSection;\n  onSectionChange: (section: SettingSection) => void;\n}\n\n/**\n * 🔥 섹션 버튼 컴포넌트\n */\nconst SectionButton = React.memo<{\n  section: SettingSectionMeta;\n  isActive: boolean;\n  onClick: () => void;\n}>(({ section, isActive, onClick }) => {\n  const Icon = section.icon;\n  \n  return (\n    <button\n      type=\"button\"\n      className={`${SETTINGS_PAGE_STYLES.navButton} ${\n        isActive\n          ? SETTINGS_PAGE_STYLES.navButtonActive\n          : SETTINGS_PAGE_STYLES.navButtonInactive\n      }`}\n      onClick={onClick}\n    >\n      <Icon className=\"w-4 h-4 mr-2 inline\" />\n      {section.label}\n    </button>\n  );\n});\n\nSectionButton.displayName = 'SectionButton';\n\n/**\n * 🔥 설정 네비게이션 컴포넌트\n */\nexport const SettingsNavigation = React.memo<SettingsNavigationProps>(({ \n  activeSection, \n  onSectionChange \n}) => {\n  // 🔥 섹션 변경 핸들러 생성\n  const createSectionHandler = useCallback((sectionId: SettingSection) => {\n    return () => onSectionChange(sectionId);\n  }, [onSectionChange]);\n\n  return (\n    <nav className={SETTINGS_PAGE_STYLES.nav}>\n      {SETTING_SECTIONS.map((section) => (\n        <SectionButton\n          key={section.id}\n          section={section}\n          isActive={activeSection === section.id}\n          onClick={createSectionHandler(section.id)}\n        />\n      ))}\n    </nav>\n  );\n});\n\nSettingsNavigation.displayName = 'SettingsNavigation';\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;;AAG9B;AACA;AAAA;AAAA;AAAA;AACA;AAJA;;;;;AAOA;;CAEC,GACD,MAAM,mBAAyC;IAC7C;QAAE,IAAI;QAAO,OAAO;QAAQ,MAAM,+RAAA,CAAA,WAAQ;IAAC;IAC3C;QAAE,IAAI;QAAY,OAAO;QAAO,MAAM,+RAAA,CAAA,WAAQ;IAAC;IAC/C;QAAE,IAAI;QAAM,OAAO;QAAS,MAAM,6RAAA,CAAA,UAAO;IAAC;IAC1C;QAAE,IAAI;QAAe,OAAO;QAAM,MAAM,qRAAA,CAAA,MAAG;IAAC;CAC7C;AAUD;;CAEC,GACD,MAAM,8BAAgB,sWAAA,CAAA,UAAK,CAAC,IAAI,CAI7B,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE;IAChC,MAAM,OAAO,QAAQ,IAAI;IAEzB,qBACE,+YAAC;QACC,MAAK;QACL,WAAW,GAAG,yJAAA,CAAA,uBAAoB,CAAC,SAAS,CAAC,CAAC,EAC5C,WACI,yJAAA,CAAA,uBAAoB,CAAC,eAAe,GACpC,yJAAA,CAAA,uBAAoB,CAAC,iBAAiB,EAC1C;QACF,SAAS;;0BAET,+YAAC;gBAAK,WAAU;;;;;;YACf,QAAQ,KAAK;;;;;;;AAGpB;AAEA,cAAc,WAAW,GAAG;AAKrB,MAAM,mCAAqB,sWAAA,CAAA,UAAK,CAAC,IAAI,CAA0B,CAAC,EACrE,aAAa,EACb,eAAe,EAChB;IACC,kBAAkB;IAClB,MAAM,uBAAuB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACxC,OAAO,IAAM,gBAAgB;IAC/B,GAAG;QAAC;KAAgB;IAEpB,qBACE,+YAAC;QAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,GAAG;kBACrC,iBAAiB,GAAG,CAAC,CAAC,wBACrB,+YAAC;gBAEC,SAAS;gBACT,UAAU,kBAAkB,QAAQ,EAAE;gBACtC,SAAS,qBAAqB,QAAQ,EAAE;eAHnC,QAAQ,EAAE;;;;;;;;;;AAQzB;AAEA,mBAAmB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/controls/SettingItem.tsx"],"sourcesContent":["// 🔥 기가차드 SettingItem 공통 컴포넌트 - 최적화\n'use client';\n\nimport React from 'react';\nimport { SETTINGS_PAGE_STYLES } from '../../constants/styles';\n\n/**\n * 🔥 설정 항목 Props\n */\ninterface SettingItemProps {\n  title: string;\n  description: string;\n  control: React.ReactNode;\n}\n\n/**\n * 🔥 메모이제이션된 설정 항목 컴포넌트\n */\nexport const SettingItem = React.memo<SettingItemProps>(({ title, description, control }) => {\n  return (\n    <div className={SETTINGS_PAGE_STYLES.settingRow}>\n      <div className={SETTINGS_PAGE_STYLES.settingLabel}>\n        <div className={SETTINGS_PAGE_STYLES.settingTitle}>{title}</div>\n        <div className={SETTINGS_PAGE_STYLES.settingDescription}>{description}</div>\n      </div>\n      <div className={SETTINGS_PAGE_STYLES.settingControl}>\n        {control}\n      </div>\n    </div>\n  );\n});\n\nSettingItem.displayName = 'SettingItem';\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;;AAGpC;AACA;AAHA;;;;AAiBO,MAAM,4BAAc,sWAAA,CAAA,UAAK,CAAC,IAAI,CAAmB,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE;IACtF,qBACE,+YAAC;QAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,UAAU;;0BAC7C,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,YAAY;;kCAC/C,+YAAC;wBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,YAAY;kCAAG;;;;;;kCACpD,+YAAC;wBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,kBAAkB;kCAAG;;;;;;;;;;;;0BAE5D,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,cAAc;0BAChD;;;;;;;;;;;;AAIT;AAEA,YAAY,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/controls/Toggle.tsx"],"sourcesContent":["// 🔥 기가차드 Toggle 컴포넌트 - 완전 최적화\n'use client';\n\nimport React, { useCallback } from 'react';\nimport { SETTINGS_PAGE_STYLES } from '../../constants/styles';\nimport type { ToggleProps } from '../../types';\n\n/**\n * 🔥 메모이제이션된 Toggle 컴포넌트\n */\nexport const Toggle = React.memo<ToggleProps>(({ checked, onChange, disabled = false }) => {\n  // 🔥 이벤트 핸들러 메모이제이션\n  const handleToggle = useCallback(() => {\n    if (!disabled) {\n      onChange(!checked);\n    }\n  }, [checked, onChange, disabled]);\n\n  // 🔥 키보드 이벤트 핸들러\n  const handleKeyDown = useCallback((event: React.KeyboardEvent) => {\n    if ((event.key === 'Enter' || event.key === ' ') && !disabled) {\n      event.preventDefault();\n      onChange(!checked);\n    }\n  }, [checked, onChange, disabled]);\n\n  return (\n    <button\n      type=\"button\"\n      role=\"switch\"\n      aria-checked={checked}\n      disabled={disabled}\n      className={`${SETTINGS_PAGE_STYLES.toggle} ${\n        checked ? SETTINGS_PAGE_STYLES.toggleActive : SETTINGS_PAGE_STYLES.toggleInactive\n      } ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n      onClick={handleToggle}\n      onKeyDown={handleKeyDown}\n    >\n      <span\n        className={`${SETTINGS_PAGE_STYLES.toggleSwitch} ${\n          checked ? SETTINGS_PAGE_STYLES.toggleSwitchActive : SETTINGS_PAGE_STYLES.toggleSwitchInactive\n        }`}\n      />\n    </button>\n  );\n});\n\nToggle.displayName = 'Toggle';\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;AAG/B;AACA;AAHA;;;;AASO,MAAM,uBAAS,sWAAA,CAAA,UAAK,CAAC,IAAI,CAAc,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,KAAK,EAAE;IACpF,oBAAoB;IACpB,MAAM,eAAe,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QAC/B,IAAI,CAAC,UAAU;YACb,SAAS,CAAC;QACZ;IACF,GAAG;QAAC;QAAS;QAAU;KAAS;IAEhC,iBAAiB;IACjB,MAAM,gBAAgB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,KAAK,WAAW,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,UAAU;YAC7D,MAAM,cAAc;YACpB,SAAS,CAAC;QACZ;IACF,GAAG;QAAC;QAAS;QAAU;KAAS;IAEhC,qBACE,+YAAC;QACC,MAAK;QACL,MAAK;QACL,gBAAc;QACd,UAAU;QACV,WAAW,GAAG,yJAAA,CAAA,uBAAoB,CAAC,MAAM,CAAC,CAAC,EACzC,UAAU,yJAAA,CAAA,uBAAoB,CAAC,YAAY,GAAG,yJAAA,CAAA,uBAAoB,CAAC,cAAc,CAClF,CAAC,EAAE,WAAW,kCAAkC,IAAI;QACrD,SAAS;QACT,WAAW;kBAEX,cAAA,+YAAC;YACC,WAAW,GAAG,yJAAA,CAAA,uBAAoB,CAAC,YAAY,CAAC,CAAC,EAC/C,UAAU,yJAAA,CAAA,uBAAoB,CAAC,kBAAkB,GAAG,yJAAA,CAAA,uBAAoB,CAAC,oBAAoB,EAC7F;;;;;;;;;;;AAIV;AAEA,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/sections/AppSettingsSection.tsx"],"sourcesContent":["// 🔥 기가차드 앱 설정 섹션 - 최적화\n'use client';\n\nimport React, { useCallback } from 'react';\nimport { Settings } from 'lucide-react';\nimport { SETTINGS_PAGE_STYLES } from '../../constants/styles';\nimport { SettingItem } from '../controls/SettingItem';\nimport { Toggle } from '../controls/Toggle';\nimport type { SettingsData, UpdateSettingFunction } from '../../types';\n\n/**\n * 🔥 앱 설정 섹션 Props\n */\ninterface AppSettingsSectionProps {\n  settings: SettingsData['app'];\n  updateSetting: UpdateSettingFunction;\n  setTheme: (theme: 'light' | 'dark' | 'system') => void;\n}\n\n/**\n * 🔥 앱 설정 섹션 컴포넌트\n */\nexport const AppSettingsSection = React.memo<AppSettingsSectionProps>(({ \n  settings, \n  updateSetting, \n  setTheme \n}) => {\n  // 🔥 테마 변경 핸들러\n  const handleThemeChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    const theme = event.target.value as 'light' | 'dark' | 'system';\n    setTheme(theme);\n    updateSetting('app', 'theme', theme);\n  }, [updateSetting, setTheme]);\n\n  // 🔥 언어 변경 핸들러\n  const handleLanguageChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    updateSetting('app', 'language', event.target.value);\n  }, [updateSetting]);\n\n  // 🔥 글꼴 크기 변경 핸들러\n  const handleFontSizeChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const size = parseInt(event.target.value, 10);\n    if (size >= 10 && size <= 24) {\n      updateSetting('app', 'fontSize', size);\n    }\n  }, [updateSetting]);\n\n  // 🔥 글꼴 패밀리 변경 핸들러\n  const handleFontFamilyChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    updateSetting('app', 'fontFamily', event.target.value);\n  }, [updateSetting]);\n\n  // 🔥 토글 핸들러들\n  const handleAutoSaveToggle = useCallback((checked: boolean) => {\n    updateSetting('app', 'autoSave', checked);\n  }, [updateSetting]);\n\n  const handleStartMinimizedToggle = useCallback((checked: boolean) => {\n    updateSetting('app', 'startMinimized', checked);\n  }, [updateSetting]);\n\n  const handleMinimizeToTrayToggle = useCallback((checked: boolean) => {\n    updateSetting('app', 'minimizeToTray', checked);\n  }, [updateSetting]);\n\n  return (\n    <div className={SETTINGS_PAGE_STYLES.sectionCard}>\n      <div className={SETTINGS_PAGE_STYLES.sectionHeader}>\n        <Settings className={SETTINGS_PAGE_STYLES.sectionIcon} />\n        <h2 className={SETTINGS_PAGE_STYLES.sectionTitle}>앱 설정</h2>\n      </div>\n\n      <div className={SETTINGS_PAGE_STYLES.settingItem}>\n        <SettingItem\n          title=\"테마\"\n          description=\"앱의 외관 테마를 선택하세요\"\n          control={\n            <select\n              value={settings.theme}\n              onChange={handleThemeChange}\n              className={SETTINGS_PAGE_STYLES.select}\n            >\n              <option value=\"system\">시스템</option>\n              <option value=\"light\">라이트</option>\n              <option value=\"dark\">다크</option>\n            </select>\n          }\n        />\n\n        <SettingItem\n          title=\"언어\"\n          description=\"앱에서 사용할 언어를 선택하세요\"\n          control={\n            <select\n              value={settings.language}\n              onChange={handleLanguageChange}\n              className={SETTINGS_PAGE_STYLES.select}\n            >\n              <option value=\"ko\">한국어</option>\n              <option value=\"en\">English</option>\n              <option value=\"ja\">日本語</option>\n            </select>\n          }\n        />\n\n        <SettingItem\n          title=\"자동 저장\"\n          description=\"작업 내용을 자동으로 저장합니다\"\n          control={\n            <Toggle\n              checked={settings.autoSave}\n              onChange={handleAutoSaveToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"최소화 상태로 시작\"\n          description=\"앱 시작 시 최소화된 상태로 실행합니다\"\n          control={\n            <Toggle\n              checked={settings.startMinimized}\n              onChange={handleStartMinimizedToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"시스템 트레이로 최소화\"\n          description=\"창을 닫을 때 시스템 트레이로 최소화합니다\"\n          control={\n            <Toggle\n              checked={settings.minimizeToTray}\n              onChange={handleMinimizeToTrayToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"글꼴 크기\"\n          description=\"앱에서 사용할 글꼴 크기를 설정하세요 (10-24px)\"\n          control={\n            <input\n              type=\"number\"\n              min=\"10\"\n              max=\"24\"\n              value={settings.fontSize}\n              onChange={handleFontSizeChange}\n              className={SETTINGS_PAGE_STYLES.numberInput}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"글꼴 패밀리\"\n          description=\"앱에서 사용할 글꼴을 선택하세요\"\n          control={\n            <select\n              value={settings.fontFamily}\n              onChange={handleFontFamilyChange}\n              className={SETTINGS_PAGE_STYLES.select}\n            >\n              <option value=\"Pretendard, -apple-system, BlinkMacSystemFont, system-ui, sans-serif\">\n                Pretendard (기본)\n              </option>\n              <option value=\"'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif\">\n                SF Pro Display\n              </option>\n              <option value=\"'Noto Sans KR', sans-serif\">\n                Noto Sans KR\n              </option>\n              <option value=\"'Malgun Gothic', sans-serif\">\n                맑은 고딕\n              </option>\n            </select>\n          }\n        />\n      </div>\n    </div>\n  );\n});\n\nAppSettingsSection.displayName = 'AppSettingsSection';\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 841, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/sections/KeyboardSettingsSection.tsx"],"sourcesContent":["// 🔥 기가차드 키보드 설정 섹션 - 최적화\n'use client';\n\nimport React, { useCallback } from 'react';\nimport { Keyboard } from 'lucide-react';\nimport { SETTINGS_PAGE_STYLES } from '../../constants/styles';\nimport { SettingItem } from '../controls/SettingItem';\nimport { Toggle } from '../controls/Toggle';\nimport type { SettingsData, UpdateSettingFunction } from '../../types';\n\n/**\n * 🔥 키보드 설정 섹션 Props\n */\ninterface KeyboardSettingsSectionProps {\n  settings: SettingsData['keyboard'];\n  updateSetting: UpdateSettingFunction;\n}\n\n/**\n * 🔥 키보드 설정 섹션 컴포넌트\n */\nexport const KeyboardSettingsSection = React.memo<KeyboardSettingsSectionProps>(({ \n  settings, \n  updateSetting \n}) => {\n  // 🔥 키보드 활성화 토글 핸들러\n  const handleEnabledToggle = useCallback((checked: boolean) => {\n    updateSetting('keyboard', 'enabled', checked);\n  }, [updateSetting]);\n\n  // 🔥 모든 앱 추적 토글 핸들러\n  const handleTrackAllAppsToggle = useCallback((checked: boolean) => {\n    updateSetting('keyboard', 'trackAllApps', checked);\n  }, [updateSetting]);\n\n  // 🔥 언어 변경 핸들러\n  const handleLanguageChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    updateSetting('keyboard', 'language', event.target.value);\n  }, [updateSetting]);\n\n  // 🔥 세션 타임아웃 변경 핸들러\n  const handleSessionTimeoutChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const timeout = parseInt(event.target.value, 10);\n    if (timeout >= 5 && timeout <= 120) {\n      updateSetting('keyboard', 'sessionTimeout', timeout);\n    }\n  }, [updateSetting]);\n\n  return (\n    <div className={SETTINGS_PAGE_STYLES.sectionCard}>\n      <div className={SETTINGS_PAGE_STYLES.sectionHeader}>\n        <Keyboard className={SETTINGS_PAGE_STYLES.sectionIcon} />\n        <h2 className={SETTINGS_PAGE_STYLES.sectionTitle}>키보드 설정</h2>\n      </div>\n\n      <div className={SETTINGS_PAGE_STYLES.settingItem}>\n        <SettingItem\n          title=\"키보드 모니터링 활성화\"\n          description=\"키보드 입력을 모니터링하여 타이핑 통계를 수집합니다\"\n          control={\n            <Toggle\n              checked={settings.enabled}\n              onChange={handleEnabledToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"입력 언어\"\n          description=\"주로 사용하는 입력 언어를 선택하세요\"\n          control={\n            <select\n              value={settings.language}\n              onChange={handleLanguageChange}\n              className={SETTINGS_PAGE_STYLES.select}\n              disabled={!settings.enabled}\n            >\n              <option value=\"korean\">한국어</option>\n              <option value=\"english\">English</option>\n              <option value=\"japanese\">日本語</option>\n              <option value=\"chinese\">中文</option>\n            </select>\n          }\n        />\n\n        <SettingItem\n          title=\"모든 앱 추적\"\n          description=\"모든 애플리케이션에서의 타이핑을 추적합니다\"\n          control={\n            <Toggle\n              checked={settings.trackAllApps}\n              onChange={handleTrackAllAppsToggle}\n              disabled={!settings.enabled}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"세션 타임아웃\"\n          description=\"타이핑 세션이 종료되는 시간(분)을 설정하세요 (5-120분)\"\n          control={\n            <input\n              type=\"number\"\n              min=\"5\"\n              max=\"120\"\n              value={settings.sessionTimeout}\n              onChange={handleSessionTimeoutChange}\n              className={SETTINGS_PAGE_STYLES.numberInput}\n              disabled={!settings.enabled}\n            />\n          }\n        />\n      </div>\n    </div>\n  );\n});\n\nKeyboardSettingsSection.displayName = 'KeyboardSettingsSection';\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAG1B;AACA;AACA;AACA;AACA;AANA;;;;;;;AAoBO,MAAM,wCAA0B,sWAAA,CAAA,UAAK,CAAC,IAAI,CAA+B,CAAC,EAC/E,QAAQ,EACR,aAAa,EACd;IACC,oBAAoB;IACpB,MAAM,sBAAsB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACvC,cAAc,YAAY,WAAW;IACvC,GAAG;QAAC;KAAc;IAElB,oBAAoB;IACpB,MAAM,2BAA2B,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC5C,cAAc,YAAY,gBAAgB;IAC5C,GAAG;QAAC;KAAc;IAElB,eAAe;IACf,MAAM,uBAAuB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACxC,cAAc,YAAY,YAAY,MAAM,MAAM,CAAC,KAAK;IAC1D,GAAG;QAAC;KAAc;IAElB,oBAAoB;IACpB,MAAM,6BAA6B,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC9C,MAAM,UAAU,SAAS,MAAM,MAAM,CAAC,KAAK,EAAE;QAC7C,IAAI,WAAW,KAAK,WAAW,KAAK;YAClC,cAAc,YAAY,kBAAkB;QAC9C;IACF,GAAG;QAAC;KAAc;IAElB,qBACE,+YAAC;QAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;0BAC9C,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,aAAa;;kCAChD,+YAAC,+RAAA,CAAA,WAAQ;wBAAC,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;;;;;kCACrD,+YAAC;wBAAG,WAAW,yJAAA,CAAA,uBAAoB,CAAC,YAAY;kCAAE;;;;;;;;;;;;0BAGpD,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;kCAC9C,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC,uKAAA,CAAA,SAAM;4BACL,SAAS,SAAS,OAAO;4BACzB,UAAU;;;;;;;;;;;kCAKhB,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC;4BACC,OAAO,SAAS,QAAQ;4BACxB,UAAU;4BACV,WAAW,yJAAA,CAAA,uBAAoB,CAAC,MAAM;4BACtC,UAAU,CAAC,SAAS,OAAO;;8CAE3B,+YAAC;oCAAO,OAAM;8CAAS;;;;;;8CACvB,+YAAC;oCAAO,OAAM;8CAAU;;;;;;8CACxB,+YAAC;oCAAO,OAAM;8CAAW;;;;;;8CACzB,+YAAC;oCAAO,OAAM;8CAAU;;;;;;;;;;;;;;;;;kCAK9B,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC,uKAAA,CAAA,SAAM;4BACL,SAAS,SAAS,YAAY;4BAC9B,UAAU;4BACV,UAAU,CAAC,SAAS,OAAO;;;;;;;;;;;kCAKjC,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC;4BACC,MAAK;4BACL,KAAI;4BACJ,KAAI;4BACJ,OAAO,SAAS,cAAc;4BAC9B,UAAU;4BACV,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;4BAC3C,UAAU,CAAC,SAAS,OAAO;;;;;;;;;;;;;;;;;;;;;;;AAOzC;AAEA,wBAAwB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1042, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/sections/UISettingsSection.tsx"],"sourcesContent":["// 🔥 기가차드 UI 설정 섹션 - 최적화\n'use client';\n\nimport React, { useCallback } from 'react';\nimport { Palette } from 'lucide-react';\nimport { SETTINGS_PAGE_STYLES } from '../../constants/styles';\nimport { SettingItem } from '../controls/SettingItem';\nimport { Toggle } from '../controls/Toggle';\nimport type { SettingsData, UpdateSettingFunction } from '../../types';\n\n/**\n * 🔥 UI 설정 섹션 Props\n */\ninterface UISettingsSectionProps {\n  settings: SettingsData['ui'];\n  updateSetting: UpdateSettingFunction;\n}\n\n/**\n * 🔥 UI 설정 섹션 컴포넌트\n */\nexport const UISettingsSection = React.memo<UISettingsSectionProps>(({ \n  settings, \n  updateSetting \n}) => {\n  // 🔥 창 너비 변경 핸들러\n  const handleWindowWidthChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const width = parseInt(event.target.value, 10);\n    if (width >= 800 && width <= 2560) {\n      updateSetting('ui', 'windowWidth', width);\n    }\n  }, [updateSetting]);\n\n  // 🔥 창 높이 변경 핸들러\n  const handleWindowHeightChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const height = parseInt(event.target.value, 10);\n    if (height >= 600 && height <= 1440) {\n      updateSetting('ui', 'windowHeight', height);\n    }\n  }, [updateSetting]);\n\n  // 🔥 토글 핸들러들\n  const handleSidebarCollapsedToggle = useCallback((checked: boolean) => {\n    updateSetting('ui', 'sidebarCollapsed', checked);\n  }, [updateSetting]);\n\n  const handleFocusModeToggle = useCallback((checked: boolean) => {\n    updateSetting('ui', 'focusMode', checked);\n  }, [updateSetting]);\n\n  const handleShowLineNumbersToggle = useCallback((checked: boolean) => {\n    updateSetting('ui', 'showLineNumbers', checked);\n  }, [updateSetting]);\n\n  const handleShowWordCountToggle = useCallback((checked: boolean) => {\n    updateSetting('ui', 'showWordCount', checked);\n  }, [updateSetting]);\n\n  return (\n    <div className={SETTINGS_PAGE_STYLES.sectionCard}>\n      <div className={SETTINGS_PAGE_STYLES.sectionHeader}>\n        <Palette className={SETTINGS_PAGE_STYLES.sectionIcon} />\n        <h2 className={SETTINGS_PAGE_STYLES.sectionTitle}>UI/UX 설정</h2>\n      </div>\n\n      <div className={SETTINGS_PAGE_STYLES.settingItem}>\n        <SettingItem\n          title=\"창 너비\"\n          description=\"앱 창의 기본 너비를 설정하세요 (800-2560px)\"\n          control={\n            <input\n              type=\"number\"\n              min=\"800\"\n              max=\"2560\"\n              step=\"50\"\n              value={settings.windowWidth}\n              onChange={handleWindowWidthChange}\n              className={SETTINGS_PAGE_STYLES.numberInput}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"창 높이\"\n          description=\"앱 창의 기본 높이를 설정하세요 (600-1440px)\"\n          control={\n            <input\n              type=\"number\"\n              min=\"600\"\n              max=\"1440\"\n              step=\"50\"\n              value={settings.windowHeight}\n              onChange={handleWindowHeightChange}\n              className={SETTINGS_PAGE_STYLES.numberInput}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"사이드바 접기\"\n          description=\"앱 시작 시 사이드바를 접힌 상태로 표시합니다\"\n          control={\n            <Toggle\n              checked={settings.sidebarCollapsed}\n              onChange={handleSidebarCollapsedToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"집중 모드\"\n          description=\"집중 모드에서는 불필요한 UI 요소를 숨깁니다\"\n          control={\n            <Toggle\n              checked={settings.focusMode}\n              onChange={handleFocusModeToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"줄 번호 표시\"\n          description=\"에디터에서 줄 번호를 표시합니다\"\n          control={\n            <Toggle\n              checked={settings.showLineNumbers}\n              onChange={handleShowLineNumbersToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"단어 수 표시\"\n          description=\"상태바에 단어 수를 표시합니다\"\n          control={\n            <Toggle\n              checked={settings.showWordCount}\n              onChange={handleShowWordCountToggle}\n            />\n          }\n        />\n      </div>\n    </div>\n  );\n});\n\nUISettingsSection.displayName = 'UISettingsSection';\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1255, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/sections/PerformanceSettingsSection.tsx"],"sourcesContent":["// 🔥 기가차드 성능 설정 섹션 - 최적화\n'use client';\n\nimport React, { useCallback } from 'react';\nimport { Cpu } from 'lucide-react';\nimport { SETTINGS_PAGE_STYLES } from '../../constants/styles';\nimport { SettingItem } from '../controls/SettingItem';\nimport { Toggle } from '../controls/Toggle';\nimport type { SettingsData, UpdateSettingFunction } from '../../types';\n\n/**\n * 🔥 성능 설정 섹션 Props\n */\ninterface PerformanceSettingsSectionProps {\n  settings: SettingsData['performance'];\n  updateSetting: UpdateSettingFunction;\n}\n\n/**\n * 🔥 성능 설정 섹션 컴포넌트\n */\nexport const PerformanceSettingsSection = React.memo<PerformanceSettingsSectionProps>(({ \n  settings, \n  updateSetting \n}) => {\n  // 🔥 최대 CPU 사용률 변경 핸들러\n  const handleMaxCPUUsageChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const usage = parseInt(event.target.value, 10);\n    if (usage >= 20 && usage <= 100) {\n      updateSetting('performance', 'maxCPUUsage', usage);\n    }\n  }, [updateSetting]);\n\n  // 🔥 최대 메모리 사용량 변경 핸들러\n  const handleMaxMemoryUsageChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const memory = parseInt(event.target.value, 10);\n    if (memory >= 512 && memory <= 8192) {\n      updateSetting('performance', 'maxMemoryUsage', memory);\n    }\n  }, [updateSetting]);\n\n  // 🔥 토글 핸들러들\n  const handleGPUAccelerationToggle = useCallback((checked: boolean) => {\n    updateSetting('performance', 'enableGPUAcceleration', checked);\n  }, [updateSetting]);\n\n  const handleHardwareAccelerationToggle = useCallback((checked: boolean) => {\n    updateSetting('performance', 'enableHardwareAcceleration', checked);\n  }, [updateSetting]);\n\n  return (\n    <div className={SETTINGS_PAGE_STYLES.sectionCard}>\n      <div className={SETTINGS_PAGE_STYLES.sectionHeader}>\n        <Cpu className={SETTINGS_PAGE_STYLES.sectionIcon} />\n        <h2 className={SETTINGS_PAGE_STYLES.sectionTitle}>성능 설정</h2>\n      </div>\n\n      <div className={SETTINGS_PAGE_STYLES.settingItem}>\n        <SettingItem\n          title=\"GPU 가속 활성화\"\n          description=\"GPU를 사용하여 렌더링 성능을 향상시킵니다\"\n          control={\n            <Toggle\n              checked={settings.enableGPUAcceleration}\n              onChange={handleGPUAccelerationToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"하드웨어 가속 활성화\"\n          description=\"하드웨어 가속을 사용하여 전반적인 성능을 향상시킵니다\"\n          control={\n            <Toggle\n              checked={settings.enableHardwareAcceleration}\n              onChange={handleHardwareAccelerationToggle}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"최대 CPU 사용률\"\n          description=\"앱이 사용할 수 있는 최대 CPU 사용률(%)을 설정하세요 (20-100%)\"\n          control={\n            <input\n              type=\"number\"\n              min=\"20\"\n              max=\"100\"\n              step=\"5\"\n              value={settings.maxCPUUsage}\n              onChange={handleMaxCPUUsageChange}\n              className={SETTINGS_PAGE_STYLES.numberInput}\n            />\n          }\n        />\n\n        <SettingItem\n          title=\"최대 메모리 사용량\"\n          description=\"앱이 사용할 수 있는 최대 메모리 사용량(MB)을 설정하세요 (512-8192MB)\"\n          control={\n            <input\n              type=\"number\"\n              min=\"512\"\n              max=\"8192\"\n              step=\"256\"\n              value={settings.maxMemoryUsage}\n              onChange={handleMaxMemoryUsageChange}\n              className={SETTINGS_PAGE_STYLES.numberInput}\n            />\n          }\n        />\n      </div>\n    </div>\n  );\n});\n\nPerformanceSettingsSection.displayName = 'PerformanceSettingsSection';\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AAGzB;AACA;AACA;AACA;AACA;AANA;;;;;;;AAoBO,MAAM,2CAA6B,sWAAA,CAAA,UAAK,CAAC,IAAI,CAAkC,CAAC,EACrF,QAAQ,EACR,aAAa,EACd;IACC,uBAAuB;IACvB,MAAM,0BAA0B,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC3C,MAAM,QAAQ,SAAS,MAAM,MAAM,CAAC,KAAK,EAAE;QAC3C,IAAI,SAAS,MAAM,SAAS,KAAK;YAC/B,cAAc,eAAe,eAAe;QAC9C;IACF,GAAG;QAAC;KAAc;IAElB,uBAAuB;IACvB,MAAM,6BAA6B,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC9C,MAAM,SAAS,SAAS,MAAM,MAAM,CAAC,KAAK,EAAE;QAC5C,IAAI,UAAU,OAAO,UAAU,MAAM;YACnC,cAAc,eAAe,kBAAkB;QACjD;IACF,GAAG;QAAC;KAAc;IAElB,aAAa;IACb,MAAM,8BAA8B,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC/C,cAAc,eAAe,yBAAyB;IACxD,GAAG;QAAC;KAAc;IAElB,MAAM,mCAAmC,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACpD,cAAc,eAAe,8BAA8B;IAC7D,GAAG;QAAC;KAAc;IAElB,qBACE,+YAAC;QAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;0BAC9C,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,aAAa;;kCAChD,+YAAC,qRAAA,CAAA,MAAG;wBAAC,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;;;;;kCAChD,+YAAC;wBAAG,WAAW,yJAAA,CAAA,uBAAoB,CAAC,YAAY;kCAAE;;;;;;;;;;;;0BAGpD,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;kCAC9C,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC,uKAAA,CAAA,SAAM;4BACL,SAAS,SAAS,qBAAqB;4BACvC,UAAU;;;;;;;;;;;kCAKhB,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC,uKAAA,CAAA,SAAM;4BACL,SAAS,SAAS,0BAA0B;4BAC5C,UAAU;;;;;;;;;;;kCAKhB,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC;4BACC,MAAK;4BACL,KAAI;4BACJ,KAAI;4BACJ,MAAK;4BACL,OAAO,SAAS,WAAW;4BAC3B,UAAU;4BACV,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;;;;;;;;;;kCAKjD,+YAAC,4KAAA,CAAA,cAAW;wBACV,OAAM;wBACN,aAAY;wBACZ,uBACE,+YAAC;4BACC,MAAK;4BACL,KAAI;4BACJ,KAAI;4BACJ,MAAK;4BACL,OAAO,SAAS,cAAc;4BAC9B,UAAU;4BACV,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;;;;;;;;;;;;;;;;;;;;;;;AAOzD;AAEA,2BAA2B,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1426, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/components/SettingsActions.tsx"],"sourcesContent":["// 🔥 기가차드 설정 액션 버튼 컴포넌트 - 최적화\n'use client';\n\nimport React, { useCallback } from 'react';\nimport { Save, RotateCcw } from 'lucide-react';\nimport { SETTINGS_PAGE_STYLES } from '../constants/styles';\n\n/**\n * 🔥 액션 버튼 Props\n */\ninterface SettingsActionsProps {\n  saving: boolean;\n  onSave: () => Promise<void>;\n  onReset: () => Promise<void>;\n}\n\n/**\n * 🔥 설정 액션 버튼 컴포넌트\n */\nexport const SettingsActions = React.memo<SettingsActionsProps>(({ \n  saving, \n  onSave, \n  onReset \n}) => {\n  // 🔥 저장 핸들러\n  const handleSave = useCallback(async () => {\n    try {\n      await onSave();\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n    }\n  }, [onSave]);\n\n  // 🔥 리셋 핸들러 (확인 다이얼로그 포함)\n  const handleReset = useCallback(async () => {\n    const confirmed = window.confirm(\n      '모든 설정을 기본값으로 초기화하시겠습니까?\\n이 작업은 되돌릴 수 없습니다.'\n    );\n    \n    if (confirmed) {\n      try {\n        await onReset();\n      } catch (error) {\n        console.error('Failed to reset settings:', error);\n      }\n    }\n  }, [onReset]);\n\n  return (\n    <div className={SETTINGS_PAGE_STYLES.actions}>\n      <button\n        type=\"button\"\n        className={`${SETTINGS_PAGE_STYLES.button} ${SETTINGS_PAGE_STYLES.secondaryButton}`}\n        onClick={handleReset}\n        disabled={saving}\n      >\n        <RotateCcw className=\"w-4 h-4 mr-2\" />\n        기본값으로 복원\n      </button>\n      \n      <button\n        type=\"button\"\n        className={`${SETTINGS_PAGE_STYLES.button} ${SETTINGS_PAGE_STYLES.primaryButton}`}\n        onClick={handleSave}\n        disabled={saving}\n      >\n        <Save className=\"w-4 h-4 mr-2\" />\n        {saving ? '저장 중...' : '모든 설정 저장'}\n      </button>\n    </div>\n  );\n});\n\nSettingsActions.displayName = 'SettingsActions';\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;;AAG9B;AACA;AAAA;AACA;AAJA;;;;;AAkBO,MAAM,gCAAkB,sWAAA,CAAA,UAAK,CAAC,IAAI,CAAuB,CAAC,EAC/D,MAAM,EACN,MAAM,EACN,OAAO,EACR;IACC,YAAY;IACZ,MAAM,aAAa,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QAC7B,IAAI;YACF,MAAM;QACR,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;QAC5C;IACF,GAAG;QAAC;KAAO;IAEX,0BAA0B;IAC1B,MAAM,cAAc,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QAC9B,MAAM,YAAY,OAAO,OAAO,CAC9B;QAGF,IAAI,WAAW;YACb,IAAI;gBACF,MAAM;YACR,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,6BAA6B;YAC7C;QACF;IACF,GAAG;QAAC;KAAQ;IAEZ,qBACE,+YAAC;QAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,OAAO;;0BAC1C,+YAAC;gBACC,MAAK;gBACL,WAAW,GAAG,yJAAA,CAAA,uBAAoB,CAAC,MAAM,CAAC,CAAC,EAAE,yJAAA,CAAA,uBAAoB,CAAC,eAAe,EAAE;gBACnF,SAAS;gBACT,UAAU;;kCAEV,+YAAC,qSAAA,CAAA,YAAS;wBAAC,WAAU;;;;;;oBAAiB;;;;;;;0BAIxC,+YAAC;gBACC,MAAK;gBACL,WAAW,GAAG,yJAAA,CAAA,uBAAoB,CAAC,MAAM,CAAC,CAAC,EAAE,yJAAA,CAAA,uBAAoB,CAAC,aAAa,EAAE;gBACjF,SAAS;gBACT,UAAU;;kCAEV,+YAAC,uRAAA,CAAA,OAAI;wBAAC,WAAU;;;;;;oBACf,SAAS,YAAY;;;;;;;;;;;;;AAI9B;AAEA,gBAAgB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1521, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/settings/page.tsx"],"sourcesContent":["// 🔥 기가차드 Settings 페이지 - 완전 리팩토링 (756줄 → 80줄)\n'use client';\n\nimport React, { useState } from 'react';\nimport { SETTINGS_PAGE_STYLES } from './constants/styles';\nimport { useSettings } from './hooks/useSettings';\nimport { SettingsNavigation } from './components/SettingsNavigation';\nimport { AppSettingsSection } from './components/sections/AppSettingsSection';\nimport { KeyboardSettingsSection } from './components/sections/KeyboardSettingsSection';\nimport { UISettingsSection } from './components/sections/UISettingsSection';\nimport { PerformanceSettingsSection } from './components/sections/PerformanceSettingsSection';\nimport { SettingsActions } from './components/SettingsActions';\nimport { useTheme } from '../../providers/ThemeProvider';\nimport type { SettingSection } from './types';\n\n/**\n * 🔥 기가차드 설정 페이지 - 완전 모듈화 (11원칙 준수)\n */\nexport default function SettingsPage(): React.ReactElement {\n  const { settings, loading, saving, updateSetting, saveAllSettings, resetSettings } = useSettings();\n  const [activeSection, setActiveSection] = useState<SettingSection>('app');\n  const { setTheme } = useTheme();\n\n  // 🔥 로딩 상태 처리\n  if (loading || !settings) {\n    return (\n      <div className={SETTINGS_PAGE_STYLES.container}>\n        <div className={SETTINGS_PAGE_STYLES.loading}>\n          <div className={SETTINGS_PAGE_STYLES.loadingContent}>\n            <div className={SETTINGS_PAGE_STYLES.spinner} />\n            <p className={SETTINGS_PAGE_STYLES.loadingText}>설정을 불러오는 중...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={SETTINGS_PAGE_STYLES.container}>\n      {/* 페이지 제목 */}\n      <h1 className={SETTINGS_PAGE_STYLES.pageTitle}>설정</h1>\n\n      {/* 네비게이션 */}\n      <SettingsNavigation\n        activeSection={activeSection}\n        onSectionChange={setActiveSection}\n      />\n\n      {/* 섹션 컨텐츠 */}\n      <div className={SETTINGS_PAGE_STYLES.section}>\n        {activeSection === 'app' && (\n          <AppSettingsSection\n            settings={settings.app}\n            updateSetting={updateSetting}\n            setTheme={setTheme}\n          />\n        )}\n        \n        {activeSection === 'keyboard' && (\n          <KeyboardSettingsSection\n            settings={settings.keyboard}\n            updateSetting={updateSetting}\n          />\n        )}\n        \n        {activeSection === 'ui' && (\n          <UISettingsSection\n            settings={settings.ui}\n            updateSetting={updateSetting}\n          />\n        )}\n        \n        {activeSection === 'performance' && (\n          <PerformanceSettingsSection\n            settings={settings.performance}\n            updateSetting={updateSetting}\n          />\n        )}\n      </div>\n\n      {/* 액션 버튼 */}\n      <SettingsActions\n        saving={saving}\n        onSave={saveAllSettings}\n        onReset={resetSettings}\n      />\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;AAG9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;AAiBe,SAAS;IACtB,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,0JAAA,CAAA,cAAW,AAAD;IAC/F,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,sWAAA,CAAA,WAAQ,AAAD,EAAkB;IACnE,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,8IAAA,CAAA,WAAQ,AAAD;IAE5B,cAAc;IACd,IAAI,WAAW,CAAC,UAAU;QACxB,qBACE,+YAAC;YAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,SAAS;sBAC5C,cAAA,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,OAAO;0BAC1C,cAAA,+YAAC;oBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,cAAc;;sCACjD,+YAAC;4BAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,OAAO;;;;;;sCAC5C,+YAAC;4BAAE,WAAW,yJAAA,CAAA,uBAAoB,CAAC,WAAW;sCAAE;;;;;;;;;;;;;;;;;;;;;;IAK1D;IAEA,qBACE,+YAAC;QAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,SAAS;;0BAE5C,+YAAC;gBAAG,WAAW,yJAAA,CAAA,uBAAoB,CAAC,SAAS;0BAAE;;;;;;0BAG/C,+YAAC,uKAAA,CAAA,qBAAkB;gBACjB,eAAe;gBACf,iBAAiB;;;;;;0BAInB,+YAAC;gBAAI,WAAW,yJAAA,CAAA,uBAAoB,CAAC,OAAO;;oBACzC,kBAAkB,uBACjB,+YAAC,mLAAA,CAAA,qBAAkB;wBACjB,UAAU,SAAS,GAAG;wBACtB,eAAe;wBACf,UAAU;;;;;;oBAIb,kBAAkB,4BACjB,+YAAC,wLAAA,CAAA,0BAAuB;wBACtB,UAAU,SAAS,QAAQ;wBAC3B,eAAe;;;;;;oBAIlB,kBAAkB,sBACjB,+YAAC,kLAAA,CAAA,oBAAiB;wBAChB,UAAU,SAAS,EAAE;wBACrB,eAAe;;;;;;oBAIlB,kBAAkB,+BACjB,+YAAC,2LAAA,CAAA,6BAA0B;wBACzB,UAAU,SAAS,WAAW;wBAC9B,eAAe;;;;;;;;;;;;0BAMrB,+YAAC,oKAAA,CAAA,kBAAe;gBACd,QAAQ;gBACR,QAAQ;gBACR,SAAS;;;;;;;;;;;;AAIjB","debugId":null}}]
}