{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/MarkdownUtils.ts"],"sourcesContent":["// 🔥 한글 입력 최적화 마크다운 유틸리티\n\nimport { Logger } from '../../../../shared/logger';\n\n// CodeMirror 타입 정의 확장\ninterface CodeMirrorInstance {\n  setOption(option: string, value: unknown): void;\n  getCursor(): { line: number; ch: number };\n  getLine(line: number): string;\n  replaceRange(replacement: string, from: { line: number; ch: number }, to?: { line: number; ch: number }): void;\n  setCursor(pos: { line: number; ch: number }): void;\n  getSelection(): string;\n  replaceSelection(replacement: string): void;\n  execCommand(command: string): void;\n  getWrapperElement?(): HTMLElement; // 🔥 CodeMirror wrapper 요소 접근\n  getInputField?(): HTMLElement; // 🔥 입력 필드 접근\n  focus?(): void; // 🔥 포커스 메서드 추가\n}\n\n// 🔥 한글 입력 최적화 설정 (기가차드 수정: 커서 조작 완전 제거)\nexport const setupKoreanInputOptimization = (cm: CodeMirrorInstance): void => {\n  if (!cm) return;\n  \n  // 🔥 기본 IME 친화적 설정만 (커서 조작 X)\n  cm.setOption('inputStyle', 'contenteditable');\n  cm.setOption('lineWrapping', true);\n  cm.setOption('styleSelectedText', false);\n  cm.setOption('electricChars', false);\n  cm.setOption('smartIndent', false);\n  cm.setOption('autofocus', true);\n  \n  // 🔥 성능 최적화만\n  cm.setOption('workTime', 200);\n  cm.setOption('workDelay', 300);\n  cm.setOption('pollInterval', 100);\n  \n  Logger.info('MARKDOWN_UTILS', 'Korean IME optimization applied (cursor-safe version)');\n};\n\n// 🔥 마크다운 텍스트 분석\nexport const analyzeMarkdownText = (content: string) => {\n  if (!content) return {\n    wordCount: 0,\n    charCount: 0,\n    paragraphCount: 0,\n    headingCount: 0,\n    listItemCount: 0\n  };\n  \n  const lines = content.split('\\n');\n  \n  return {\n    wordCount: content.split(/\\s+/).filter(word => word.length > 0).length,\n    charCount: content.length,\n    paragraphCount: content.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0).length,\n    headingCount: lines.filter(line => line.match(/^#{1,6}\\s/)).length,\n    listItemCount: lines.filter(line => line.match(/^[\\s]*[-*+]\\s/)).length\n  };\n};\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AAEzB;;AAkBO,MAAM,+BAA+B,CAAC;IAC3C,IAAI,CAAC,IAAI;IAET,8BAA8B;IAC9B,GAAG,SAAS,CAAC,cAAc;IAC3B,GAAG,SAAS,CAAC,gBAAgB;IAC7B,GAAG,SAAS,CAAC,qBAAqB;IAClC,GAAG,SAAS,CAAC,iBAAiB;IAC9B,GAAG,SAAS,CAAC,eAAe;IAC5B,GAAG,SAAS,CAAC,aAAa;IAE1B,aAAa;IACb,GAAG,SAAS,CAAC,YAAY;IACzB,GAAG,SAAS,CAAC,aAAa;IAC1B,GAAG,SAAS,CAAC,gBAAgB;IAE7B,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;AAChC;AAGO,MAAM,sBAAsB,CAAC;IAClC,IAAI,CAAC,SAAS,OAAO;QACnB,WAAW;QACX,WAAW;QACX,gBAAgB;QAChB,cAAc;QACd,eAAe;IACjB;IAEA,MAAM,QAAQ,QAAQ,KAAK,CAAC;IAE5B,OAAO;QACL,WAAW,QAAQ,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,GAAG,GAAG,MAAM;QACtE,WAAW,QAAQ,MAAM;QACzB,gBAAgB,QAAQ,KAAK,CAAC,WAAW,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,GAAG,MAAM,GAAG,GAAG,MAAM;QAChF,cAAc,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,cAAc,MAAM;QAClE,eAAe,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,kBAAkB,MAAM;IACzE;AACF","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/EditorConfig.ts"],"sourcesContent":["// 🔥 EasyMDE 에디터 설정 모듈\n\n// EasyMDE 타입 정의\ninterface EasyMDEEditor {\n  codemirror: CodeMirrorEditor;\n  value(): string;\n  value(val: string): void;\n  togglePreview(): void;\n  toggleSideBySide(): void;\n  toggleFullScreen(): void;\n  isPreviewActive(): boolean;\n  isSideBySideActive(): boolean;\n  isFullscreenActive(): boolean;\n}\n\ninterface CodeMirrorEditor {\n  getCursor(): { line: number; ch: number };\n  getLine(line: number): string;\n  replaceRange(replacement: string, from: { line: number; ch: number }, to?: { line: number; ch: number }): void;\n  setCursor(pos: { line: number; ch: number }): void;\n  getSelection(): string;\n  replaceSelection(replacement: string): void;\n}\n\nexport interface EditorToolbarItem {\n  name: string;\n  action: (editor: EasyMDEEditor) => void;\n  className: string;\n  title: string;\n}\n\n// 🔥 작가 친화적 EasyMDE 설정 (FontAwesome 아이콘 + 한국어 최적화)\nexport const getEditorOptions = () => ({\n  autofocus: true,\n  spellChecker: false,\n  placeholder: '이야기를 시작해보세요...',\n  status: ['lines', 'words', 'cursor'],\n  toolbar: false, // 🔥 기본 툴바 숨기기 (커스텀 Lucide 툴바 사용)\n  shortcuts: {\n    \"toggleBold\": \"Cmd-B\",        // 🔥 macOS 스타일 단축키\n    \"toggleItalic\": \"Cmd-I\", \n    \"drawLink\": \"Cmd-K\",\n    \"toggleHeading1\": \"Cmd-Alt-1\", // 🔥 노션 스타일 헤딩 단축키\n    \"toggleHeading2\": \"Cmd-Alt-2\",\n    \"toggleHeading3\": \"Cmd-Alt-3\",\n    \"cleanBlock\": \"Cmd-E\",\n    \"drawImage\": \"Cmd-Alt-I\",\n    \"toggleUnorderedList\": \"Cmd-Shift-8\", // 🔥 노션 스타일 리스트\n    \"toggleOrderedList\": \"Cmd-Shift-7\",   // 🔥 노션 스타일 번호 리스트\n    \"toggleBlockquote\": \"Cmd-Shift-9\",    // 🔥 노션 스타일 인용구\n    \"toggleCodeBlock\": \"Cmd-Alt-C\",\n    \"togglePreview\": \"Cmd-P\",\n    \"toggleSideBySide\": \"F9\",\n    \"toggleFullScreen\": \"F11\",\n    \"toggleDarkMode\": \"Cmd-D\" // 🔥 다크모드 토글 단축키 추가\n  },\n  // 🔥 한글 입력 최적화 설정 (2024-2025 최신 IME 지원)\n  inputStyle: \"contenteditable\" as const, // 🔥 IME 지원 향상을 위해 contenteditable 사용\n  nativeSpellcheck: true, // 🔥 IME와 함께 네이티브 스펠체크 활성화\n  previewRender: (plainText: string) => {\n    return `<div class=\"prose dark:prose-invert max-w-none\">${plainText}</div>`;\n  },\n  renderingConfig: {\n    singleLineBreaks: false,\n    codeSyntaxHighlighting: true,\n  },\n  autoDownloadFontAwesome: false, // 🔥 FontAwesome 비활성화 (Lucide로 교체 예정)\n  tabSize: 2,\n  lineWrapping: true,\n  styleSelectedText: false, // 🔥 성능 향상을 위해 비활성화\n  parsingConfig: {\n    allowAtxHeaderWithoutSpace: true,\n  },\n  lineNumbers: false,\n  mode: {\n    name: \"markdown\",\n    highlightFormatting: false, // 🔥 노션 스타일을 위해 마크업 숨기기\n  },\n  // 🔥 한글 입력 최적화 설정 (IME 방해 요소 제거)\n  configureMouse: () => ({ addNew: false }),\n  indentWithTabs: false,\n  smartIndent: false, // 🔥 스마트 인덴트 비활성화 (한글 입력 방해 방지)\n  electricChars: false, // 🔥 자동 문자 교정 비활성화 (한글 조합 방해 방지)\n  rtlMoveVisually: true,\n  // 🔥 노션 스타일 커스텀 키 맵핑 (커서 위치 보존 강화)\n  extraKeys: {\n    // 🔥 노션 스타일 굵게 (Cmd+B) - 기가차드 수정: 포커스 조작 제거\n    \"Cmd-B\": function(cm: any) {\n      const cursor = cm.getCursor();\n      const selection = cm.getSelection();\n      \n      if (selection) {\n        cm.replaceSelection(`**${selection}**`);\n      } else {\n        cm.replaceSelection('****');\n        cm.setCursor({ line: cursor.line, ch: cursor.ch + 2 });\n      }\n    },\n    \n    // 🔥 노션 스타일 기울임 (Cmd+I) - 기가차드 수정: 포커스 조작 제거\n    \"Cmd-I\": function(cm: any) {\n      const cursor = cm.getCursor();\n      const selection = cm.getSelection();\n      \n      if (selection) {\n        cm.replaceSelection(`*${selection}*`);\n      } else {\n        cm.replaceSelection('**');\n        cm.setCursor({ line: cursor.line, ch: cursor.ch + 1 });\n      }\n    },\n    \n    // 🔥 노션 스타일 링크 (Cmd+K) - 기가차드 수정: 포커스 조작 제거\n    \"Cmd-K\": function(cm: any) {\n      const cursor = cm.getCursor();\n      const selection = cm.getSelection();\n      \n      if (selection) {\n        cm.replaceSelection(`[${selection}]()`);\n        const newCursor = cm.getCursor();\n        cm.setCursor({ line: newCursor.line, ch: newCursor.ch - 1 });\n      } else {\n        cm.replaceSelection('[링크 텍스트]()');\n        cm.setSelection(\n          { line: cursor.line, ch: cursor.ch + 1 },\n          { line: cursor.line, ch: cursor.ch + 6 }\n        );\n      }\n    },\n    \n    // 🔥 기가차드 마크다운 변환: Space 키로 마크업 자동 변환\n    \"Space\": function(cm: any) {\n      const cursor = cm.getCursor();\n      const line = cm.getLine(cursor.line);\n      const lineStart = line.substring(0, cursor.ch);\n      \n      // 1. 헤딩 패턴 감지 (# 1-6개) - 정확한 마크다운 변환\n      const headingMatch = lineStart.match(/^(#{1,6})$/);\n      if (headingMatch) {\n        // 단순히 스페이스만 추가 (### -> ### )\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 2. 리스트 패턴 감지 (- 또는 *)\n      const listMatch = lineStart.match(/^([-*])$/);\n      if (listMatch) {\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 3. 번호 리스트 패턴 감지 (1. 2. 등)\n      const numberedListMatch = lineStart.match(/^(\\d+\\.)$/);\n      if (numberedListMatch) {\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 4. 인용구 패턴 감지 (>)\n      const quoteMatch = lineStart.match(/^(>)$/);\n      if (quoteMatch) {\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 기본 스페이스 입력\n      cm.replaceSelection(' ');\n    }\n  }\n});\n\n// 🔥 포커스 모드용 설정\nexport const getFocusModeOptions = () => ({\n  ...getEditorOptions(),\n  toolbar: false,\n  status: false,\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/EditorProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useRef, useCallback } from 'react';\nimport { Logger } from '../../../../shared/logger';\nimport { setupKoreanInputOptimization } from './MarkdownUtils';\nimport { getEditorOptions, getFocusModeOptions } from './EditorConfig';\n\ninterface EditorContextType {\n  editorRef: React.RefObject<any>;\n  initializeEditor: (editor: any) => void;\n  getEditorOptions: () => any;\n  getFocusModeOptions: () => any;\n}\n\nconst EditorContext = createContext<EditorContextType | null>(null);\n\nexport function useEditor(): EditorContextType {\n  const context = useContext(EditorContext);\n  if (!context) {\n    throw new Error('useEditor must be used within EditorProvider');\n  }\n  return context;\n}\n\ninterface EditorProviderProps {\n  children: React.ReactNode;\n}\n\nexport function EditorProvider({ children }: EditorProviderProps): React.ReactElement {\n  const editorRef = useRef<any>(null);\n\n  const initializeEditor = useCallback((editor: any) => {\n    if (!editor || !editor.codemirror) return;\n    \n    try {\n      Logger.debug('EDITOR', 'Initializing editor for Korean input optimization');\n      \n      // 🔥 한글 입력 최적화 설정\n      setupKoreanInputOptimization(editor.codemirror);\n      \n      // 에디터 참조 저장\n      editorRef.current = editor;\n      \n      Logger.info('EDITOR', 'Editor initialized with Korean input optimization');\n    } catch (error) {\n      Logger.error('EDITOR', 'Failed to initialize editor', error);\n    }\n  }, []);\n\n  const contextValue: EditorContextType = {\n    editorRef,\n    initializeEditor,\n    getEditorOptions,\n    getFocusModeOptions\n  };\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAcA,MAAM,8BAAgB,CAAA,GAAA,sWAAA,CAAA,gBAAa,AAAD,EAA4B;AAEvD,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,sWAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAMO,SAAS,eAAe,EAAE,QAAQ,EAAuB;IAC9D,MAAM,YAAY,CAAA,GAAA,sWAAA,CAAA,SAAM,AAAD,EAAO;IAE9B,MAAM,mBAAmB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACpC,IAAI,CAAC,UAAU,CAAC,OAAO,UAAU,EAAE;QAEnC,IAAI;YACF,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,UAAU;YAEvB,kBAAkB;YAClB,CAAA,GAAA,oKAAA,CAAA,+BAA4B,AAAD,EAAE,OAAO,UAAU;YAE9C,YAAY;YACZ,UAAU,OAAO,GAAG;YAEpB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU;QACxB,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,UAAU,+BAA+B;QACxD;IACF,GAAG,EAAE;IAEL,MAAM,eAAkC;QACtC;QACA;QACA,kBAAA,mKAAA,CAAA,mBAAgB;QAChB,qBAAA,mKAAA,CAAA,sBAAmB;IACrB;IAEA,qBACE,+YAAC,cAAc,QAAQ;QAAC,OAAO;kBAC5B;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/EditorShortcuts.ts"],"sourcesContent":["// 🔥 기가차드 노션 스타일 단축키 시스템\n'use client';\n\nimport { Editor } from '@tiptap/react';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 플랫폼별 modifier 키 감지\nconst isMac = typeof window !== 'undefined' && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst modifierKey = isMac ? 'metaKey' : 'ctrlKey';\n\n// 🔥 단축키 정의 (노션 스타일)\nexport interface EditorShortcut {\n  key: string;\n  modifier: boolean;\n  shift?: boolean;\n  alt?: boolean;\n  action: (editor: Editor) => boolean;\n  description: string;\n}\n\n// 🔥 기본 텍스트 포맷팅 단축키\nexport const TEXT_FORMATTING_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: 'b',\n    modifier: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleBold().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Bold toggled');\n      return true;\n    },\n    description: '볼드 토글'\n  },\n  {\n    key: 'i',\n    modifier: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleItalic().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Italic toggled');\n      return true;\n    },\n    description: '이탤릭 토글'\n  },\n  {\n    key: 'u',\n    modifier: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleUnderline().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Underline toggled');\n      return true;\n    },\n    description: '언더라인 토글'\n  },\n  {\n    key: 's',\n    modifier: true,\n    shift: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleStrike().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Strikethrough toggled');\n      return true;\n    },\n    description: '취소선 토글'\n  },\n  {\n    key: 'k',\n    modifier: true,\n    action: (editor: Editor) => {\n      // 🔥 링크 생성 (추후 구현)\n      Logger.debug('EDITOR_SHORTCUTS', 'Link shortcut triggered');\n      return true;\n    },\n    description: '링크 생성'\n  }\n];\n\n// 🔥 헤딩 단축키\nexport const HEADING_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: '1',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleHeading({ level: 1 }).run();\n      Logger.debug('EDITOR_SHORTCUTS', 'H1 toggled');\n      return true;\n    },\n    description: '제목 1'\n  },\n  {\n    key: '2',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleHeading({ level: 2 }).run();\n      Logger.debug('EDITOR_SHORTCUTS', 'H2 toggled');\n      return true;\n    },\n    description: '제목 2'\n  },\n  {\n    key: '3',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleHeading({ level: 3 }).run();\n      Logger.debug('EDITOR_SHORTCUTS', 'H3 toggled');\n      return true;\n    },\n    description: '제목 3'\n  },\n  {\n    key: '0',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().setParagraph().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Paragraph set');\n      return true;\n    },\n    description: '일반 텍스트'\n  }\n];\n\n// 🔥 리스트 단축키\nexport const LIST_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: '8',\n    modifier: true,\n    shift: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleBulletList().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Bullet list toggled');\n      return true;\n    },\n    description: '불릿 리스트'\n  },\n  {\n    key: '7',\n    modifier: true,\n    shift: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleOrderedList().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Ordered list toggled');\n      return true;\n    },\n    description: '번호 리스트'\n  }\n];\n\n// 🔥 저장 단축키\nexport const SAVE_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: 's',\n    modifier: true,\n    action: (editor: Editor) => {\n      // 🔥 저장 이벤트 발생 (커스텀 이벤트)\n      const saveEvent = new CustomEvent('editor:save');\n      window.dispatchEvent(saveEvent);\n      Logger.info('EDITOR_SHORTCUTS', 'Save triggered');\n      return true;\n    },\n    description: '저장'\n  }\n];\n\n// 🔥 모든 단축키 통합\nexport const ALL_SHORTCUTS: EditorShortcut[] = [\n  ...TEXT_FORMATTING_SHORTCUTS,\n  ...HEADING_SHORTCUTS,\n  ...LIST_SHORTCUTS,\n  ...SAVE_SHORTCUTS\n];\n\n// 🔥 키보드 이벤트 핸들러\nexport function handleEditorKeyDown(editor: Editor | null, event: KeyboardEvent): boolean {\n  if (!editor) return false;\n\n  const { key, ctrlKey, metaKey, shiftKey, altKey } = event;\n  const isModifier = isMac ? metaKey : ctrlKey;\n\n  // 🔥 Space 키는 마크다운 처리를 위해 완전 제외\n  if (key === ' ') {\n    return false;\n  }\n\n  // 🔥 마크다운 타이핑 방해 방지: modifier 키가 없는 단일 문자는 처리하지 않음\n  if (!isModifier && !shiftKey && !altKey && key.length === 1) {\n    return false;\n  }\n\n  // 🔥 단축키 매칭 및 실행\n  for (const shortcut of ALL_SHORTCUTS) {\n    if (\n      shortcut.key.toLowerCase() === key.toLowerCase() &&\n      Boolean(shortcut.modifier) === isModifier &&\n      Boolean(shortcut.shift) === shiftKey &&\n      Boolean(shortcut.alt) === altKey\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n      \n      try {\n        const handled = shortcut.action(editor);\n        if (handled) {\n          Logger.debug('EDITOR_SHORTCUTS', `Shortcut executed: ${shortcut.description}`, {\n            key: shortcut.key,\n            modifier: isModifier,\n            shift: shiftKey,\n            alt: altKey\n          });\n          return true;\n        }\n      } catch (error) {\n        Logger.error('EDITOR_SHORTCUTS', `Shortcut execution failed: ${shortcut.description}`, error);\n      }\n    }\n  }\n\n  return false;\n}\n\n// 🔥 단축키 도움말 생성\nexport function getShortcutHelp(): string {\n  const isMacPlatform = isMac;\n  const mod = isMacPlatform ? '⌘' : 'Ctrl';\n  const alt = isMacPlatform ? '⌥' : 'Alt';\n  \n  return `\n📝 **텍스트 포맷팅**\n• ${mod}+B: 볼드\n• ${mod}+I: 이탤릭  \n• ${mod}+U: 언더라인\n• ${mod}+Shift+S: 취소선\n• ${mod}+K: 링크\n\n📄 **헤딩**\n• ${mod}+${alt}+1: 제목 1\n• ${mod}+${alt}+2: 제목 2\n• ${mod}+${alt}+3: 제목 3\n• ${mod}+${alt}+0: 일반 텍스트\n\n📋 **리스트**\n• ${mod}+Shift+8: 불릿 리스트\n• ${mod}+Shift+7: 번호 리스트\n\n💾 **저장**\n• ${mod}+S: 저장\n`.trim();\n}\n\n// 🔥 에디터에 단축키 시스템 바인딩 (전역 리스너 제거)\nexport function bindShortcutsToEditor(editor: Editor | null): () => void {\n  if (!editor) return () => {};\n\n  // 🔥 전역 리스너 등록하지 않음 - TipTap 내부 handleKeyDown만 사용\n  Logger.info('EDITOR_SHORTCUTS', 'Shortcuts system initialized', {\n    shortcutCount: ALL_SHORTCUTS.length,\n    platform: isMac ? 'macOS' : 'Windows/Linux'\n  });\n\n  // 🔥 정리 함수 반환 (실제로는 아무것도 안 함)\n  return () => {\n    Logger.debug('EDITOR_SHORTCUTS', 'Shortcuts system cleaned up');\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/ShortcutHelp.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { HelpCircle, X as XIcon } from 'lucide-react';\nimport { getShortcutHelp } from './EditorShortcuts';\n\n// 🔥 단축키 도움말 스타일\nconst HELP_STYLES = {\n  trigger: 'fixed bottom-4 right-4 z-50 w-12 h-12 bg-blue-600 hover:bg-blue-700 text-white rounded-full flex items-center justify-center shadow-lg transition-colors cursor-pointer',\n  modal: 'fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-50',\n  panel: 'bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-lg w-full mx-4 max-h-[80vh] overflow-hidden',\n  header: 'flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700',\n  title: 'text-xl font-bold text-slate-900 dark:text-slate-100',\n  closeButton: 'w-8 h-8 flex items-center justify-center rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors',\n  content: 'p-6 overflow-y-auto',\n  helpText: 'prose prose-slate dark:prose-invert max-w-none text-sm',\n} as const;\n\ninterface ShortcutHelpProps {\n  className?: string;\n}\n\nexport function ShortcutHelp({ className = '' }: ShortcutHelpProps): React.ReactElement {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleToggle = (): void => {\n    setIsOpen(prev => !prev);\n  };\n\n  const handleClose = (): void => {\n    setIsOpen(false);\n  };\n\n  const handleBackdropClick = (event: React.MouseEvent): void => {\n    if (event.target === event.currentTarget) {\n      handleClose();\n    }\n  };\n\n  // 🔥 Escape 키로 닫기 및 F1 키로 열기\n  React.useEffect(() => {\n    const handleEscape = (event: KeyboardEvent): void => {\n      if (event.key === 'Escape' && isOpen) {\n        handleClose();\n      }\n    };\n\n    const handleHelpShortcut = (): void => {\n      setIsOpen(prev => !prev);\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    window.addEventListener('shortcut:help', handleHelpShortcut);\n    \n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('shortcut:help', handleHelpShortcut);\n    };\n  }, [isOpen]);\n\n  return (\n    <>\n      {/* 🔥 도움말 트리거 버튼 */}\n      <button\n        className={`${HELP_STYLES.trigger} ${className}`}\n        onClick={handleToggle}\n        title=\"단축키 도움말 (F1)\"\n        aria-label=\"단축키 도움말\"\n      >\n        <HelpCircle size={24} />\n      </button>\n\n      {/* 🔥 도움말 모달 */}\n      {isOpen && (\n        <div className={HELP_STYLES.modal} onClick={handleBackdropClick}>\n          <div className={HELP_STYLES.panel}>\n            {/* 🔥 헤더 */}\n            <div className={HELP_STYLES.header}>\n              <h2 className={HELP_STYLES.title}>키보드 단축키</h2>\n              <button\n                className={HELP_STYLES.closeButton}\n                onClick={handleClose}\n                aria-label=\"닫기\"\n              >\n                <XIcon size={20} />\n              </button>\n            </div>\n\n            {/* 🔥 도움말 내용 */}\n            <div className={HELP_STYLES.content}>\n              <div className={HELP_STYLES.helpText}>\n                <div dangerouslySetInnerHTML={{ \n                  __html: getShortcutHelp().replace(/\\n/g, '<br>').replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') \n                }} />\n                \n                <div className=\"mt-6 pt-4 border-t border-slate-200 dark:border-slate-700\">\n                  <h3 className=\"font-bold text-slate-900 dark:text-slate-100 mb-2\">📖 마크다운 단축키</h3>\n                  <div className=\"space-y-1 text-sm\">\n                    <div><code className=\"bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded\"># 스페이스</code> → 제목 1</div>\n                    <div><code className=\"bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded\">## 스페이스</code> → 제목 2</div>\n                    <div><code className=\"bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded\">### 스페이스</code> → 제목 3</div>\n                    <div><code className=\"bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded\">- 스페이스</code> → 불릿 리스트</div>\n                    <div><code className=\"bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded\">1. 스페이스</code> → 번호 리스트</div>\n                  </div>\n                </div>\n\n                <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                    <strong>💡 팁:</strong> 텍스트를 선택하고 단축키를 누르면 선택된 텍스트에 포맷이 적용됩니다.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AAJA;;;;;AAMA,iBAAiB;AACjB,MAAM,cAAc;IAClB,SAAS;IACT,OAAO;IACP,OAAO;IACP,QAAQ;IACR,OAAO;IACP,aAAa;IACb,SAAS;IACT,UAAU;AACZ;AAMO,SAAS,aAAa,EAAE,YAAY,EAAE,EAAqB;IAChE,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,sWAAA,CAAA,WAAQ,AAAD,EAAW;IAE9C,MAAM,eAAe;QACnB,UAAU,CAAA,OAAQ,CAAC;IACrB;IAEA,MAAM,cAAc;QAClB,UAAU;IACZ;IAEA,MAAM,sBAAsB,CAAC;QAC3B,IAAI,MAAM,MAAM,KAAK,MAAM,aAAa,EAAE;YACxC;QACF;IACF;IAEA,6BAA6B;IAC7B,sWAAA,CAAA,UAAK,CAAC,SAAS,CAAC;QACd,MAAM,eAAe,CAAC;YACpB,IAAI,MAAM,GAAG,KAAK,YAAY,QAAQ;gBACpC;YACF;QACF;QAEA,MAAM,qBAAqB;YACzB,UAAU,CAAA,OAAQ,CAAC;QACrB;QAEA,SAAS,gBAAgB,CAAC,WAAW;QACrC,OAAO,gBAAgB,CAAC,iBAAiB;QAEzC,OAAO;YACL,SAAS,mBAAmB,CAAC,WAAW;YACxC,OAAO,mBAAmB,CAAC,iBAAiB;QAC9C;IACF,GAAG;QAAC;KAAO;IAEX,qBACE;;0BAEE,+YAAC;gBACC,WAAW,GAAG,YAAY,OAAO,CAAC,CAAC,EAAE,WAAW;gBAChD,SAAS;gBACT,OAAM;gBACN,cAAW;0BAEX,cAAA,+YAAC,uSAAA,CAAA,aAAU;oBAAC,MAAM;;;;;;;;;;;YAInB,wBACC,+YAAC;gBAAI,WAAW,YAAY,KAAK;gBAAE,SAAS;0BAC1C,cAAA,+YAAC;oBAAI,WAAW,YAAY,KAAK;;sCAE/B,+YAAC;4BAAI,WAAW,YAAY,MAAM;;8CAChC,+YAAC;oCAAG,WAAW,YAAY,KAAK;8CAAE;;;;;;8CAClC,+YAAC;oCACC,WAAW,YAAY,WAAW;oCAClC,SAAS;oCACT,cAAW;8CAEX,cAAA,+YAAC,iRAAA,CAAA,IAAK;wCAAC,MAAM;;;;;;;;;;;;;;;;;sCAKjB,+YAAC;4BAAI,WAAW,YAAY,OAAO;sCACjC,cAAA,+YAAC;gCAAI,WAAW,YAAY,QAAQ;;kDAClC,+YAAC;wCAAI,yBAAyB;4CAC5B,QAAQ,CAAA,GAAA,sKAAA,CAAA,kBAAe,AAAD,IAAI,OAAO,CAAC,OAAO,QAAQ,OAAO,CAAC,kBAAkB;wCAC7E;;;;;;kDAEA,+YAAC;wCAAI,WAAU;;0DACb,+YAAC;gDAAG,WAAU;0DAAoD;;;;;;0DAClE,+YAAC;gDAAI,WAAU;;kEACb,+YAAC;;0EAAI,+YAAC;gEAAK,WAAU;0EAAmD;;;;;;4DAAa;;;;;;;kEACrF,+YAAC;;0EAAI,+YAAC;gEAAK,WAAU;0EAAmD;;;;;;4DAAc;;;;;;;kEACtF,+YAAC;;0EAAI,+YAAC;gEAAK,WAAU;0EAAmD;;;;;;4DAAe;;;;;;;kEACvF,+YAAC;;0EAAI,+YAAC;gEAAK,WAAU;0EAAmD;;;;;;4DAAa;;;;;;;kEACrF,+YAAC;;0EAAI,+YAAC;gEAAK,WAAU;0EAAmD;;;;;;4DAAc;;;;;;;;;;;;;;;;;;;kDAI1F,+YAAC;wCAAI,WAAU;kDACb,cAAA,+YAAC;4CAAE,WAAU;;8DACX,+YAAC;8DAAO;;;;;;gDAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAU1C","debugId":null}},
    {"offset": {"line": 812, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/WriterSidebar.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { \n  Edit3, \n  FileText, \n  Users, \n  BookOpen, \n  TrendingUp,\n  Circle,\n  CheckCircle,\n  Plus,\n  MoreHorizontal\n} from 'lucide-react';\nimport { ProjectCharacter, ProjectStructure } from '../../../../shared/types';\nimport { WriterStats } from '../editor/WriterStats';\n\ninterface WriterSidebarProps {\n  currentView: string;\n  onViewChange: (view: string) => void;\n  structure: ProjectStructure[];\n  characters: ProjectCharacter[];\n  stats: WriterStats;\n  collapsed: boolean;\n}\n\n// 🔥 기가차드 간소화된 사이드바 스타일\nconst SIDEBAR_STYLES = {\n  // 기본 컨테이너 (스크롤바 문제 해결)\n  container: 'flex flex-col bg-gray-50 dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-all duration-300 h-full',\n  collapsed: 'w-12',\n  expanded: 'w-64',\n  \n  // 🔥 얇은 스크롤바 적용 영역\n  scrollArea: 'flex-1 overflow-y-auto overflow-x-hidden custom-scrollbar',\n  \n  // 🔥 메뉴 섹션 간소화\n  menuSection: 'p-3 space-y-1',\n  menuItem: 'flex items-center gap-3 px-3 py-2 text-sm font-medium transition-colors duration-200 cursor-pointer rounded-md',\n  menuItemActive: 'bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300',\n  menuItemInactive: 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700',\n  \n  // 🔥 섹션 헤더 간소화\n  sectionHeader: 'text-xs font-semibold text-gray-500 dark:text-gray-400 mb-2 px-3',\n  \n  // 🔥 구조 아이템 간소화\n  structureList: 'space-y-1 px-3',\n  structureItem: 'flex items-center gap-2 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer transition-colors',\n  \n  // 🔥 통계 영역 간소화\n  statsSection: 'p-3 border-t border-gray-200 dark:border-gray-700',\n  statItem: 'flex justify-between items-center py-1 text-sm',\n  statLabel: 'text-gray-600 dark:text-gray-400',\n  statValue: 'font-medium text-gray-900 dark:text-gray-100',\n} as const;\n\n// 🔥 메뉴 아이템 정의 (핵심 기능만)\nconst MENU_ITEMS = [\n  { id: 'write', label: '글쓰기', icon: Edit3 },\n  { id: 'structure', label: '구조', icon: FileText },\n  { id: 'characters', label: '인물', icon: Users },\n  { id: 'notes', label: '메모', icon: BookOpen },\n];\n\nexport function WriterSidebar({\n  currentView,\n  onViewChange,\n  structure,\n  characters,\n  stats,\n  collapsed\n}: WriterSidebarProps): React.ReactElement {\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['structure']));\n  \n  const toggleSection = (sectionId: string): void => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(sectionId)) {\n      newExpanded.delete(sectionId);\n    } else {\n      newExpanded.add(sectionId);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  // 🔥 축소 모드에서는 아이콘만 표시\n  if (collapsed) {\n    return (\n      <div className={`${SIDEBAR_STYLES.container} ${SIDEBAR_STYLES.collapsed}`}>\n        <div className={SIDEBAR_STYLES.menuSection}>\n          {MENU_ITEMS.map((item) => (\n            <button\n              key={item.id}\n              onClick={() => onViewChange(item.id)}\n              className={`w-8 h-8 flex items-center justify-center rounded-md transition-colors ${\n                currentView === item.id \n                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-300' \n                  : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\n              }`}\n              title={item.label}\n            >\n              <item.icon size={16} />\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${SIDEBAR_STYLES.container} ${SIDEBAR_STYLES.expanded}`}>\n      {/* 🔥 메인 메뉴 */}\n      <div className={SIDEBAR_STYLES.menuSection}>\n        {MENU_ITEMS.map((item) => (\n          <button\n            key={item.id}\n            onClick={() => onViewChange(item.id)}\n            className={`${SIDEBAR_STYLES.menuItem} ${\n              currentView === item.id ? SIDEBAR_STYLES.menuItemActive : SIDEBAR_STYLES.menuItemInactive\n            }`}\n          >\n            <item.icon size={16} />\n            <span>{item.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* 🔥 스크롤 가능한 컨텐츠 영역 - 뷰별 내용 표시 */}\n      <div className={SIDEBAR_STYLES.scrollArea}>\n        {/* 🔥 현재 뷰에 따른 컨텐츠 표시 */}\n        {currentView === 'write' && (\n          <>\n            {/* 🔥 프로젝트 구조 */}\n            <div className=\"p-3\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>프로젝트 구조</h3>\n              <div className={SIDEBAR_STYLES.structureList}>\n                {structure.map((item, index) => (\n                  <div key={item.id} className={SIDEBAR_STYLES.structureItem}>\n                    <Circle size={12} className=\"text-blue-500\" />\n                    <span className=\"flex-1\">{`${index + 1}장: ${item.title}`}</span>\n                    <span className=\"text-xs text-gray-400\">{item.status}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* 🔥 간단한 글쓰기 통계 */}\n            <div className={SIDEBAR_STYLES.statsSection}>\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>글쓰기 통계</h3>\n              <div className=\"space-y-2\">\n                <div className={SIDEBAR_STYLES.statItem}>\n                  <span className={SIDEBAR_STYLES.statLabel}>단어</span>\n                  <span className={SIDEBAR_STYLES.statValue}>{stats.wordCount}</span>\n                </div>\n                <div className={SIDEBAR_STYLES.statItem}>\n                  <span className={SIDEBAR_STYLES.statLabel}>문자</span>\n                  <span className={SIDEBAR_STYLES.statValue}>{stats.charCount}</span>\n                </div>\n                <div className={SIDEBAR_STYLES.statItem}>\n                  <span className={SIDEBAR_STYLES.statLabel}>진행률</span>\n                  <span className={SIDEBAR_STYLES.statValue}>{stats.progress}%</span>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* 🔥 구조 뷰 */}\n        {currentView === 'structure' && (\n          <div className=\"p-3\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>구조 관리</h3>\n              <button className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\">\n                <Plus size={16} />\n              </button>\n            </div>\n            <div className={SIDEBAR_STYLES.structureList}>\n              {structure.map((item, index) => (\n                <div key={item.id} className={`${SIDEBAR_STYLES.structureItem} justify-between`}>\n                  <div className=\"flex items-center gap-2\">\n                    <Circle size={12} className=\"text-blue-500\" />\n                    <span className=\"flex-1\">{`${index + 1}장: ${item.title}`}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"text-xs text-gray-400\">{item.status}</span>\n                    <button className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\">\n                      <MoreHorizontal size={12} />\n                    </button>\n                  </div>\n                </div>\n              ))}\n              {structure.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  <FileText size={32} className=\"mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">구조를 추가해보세요</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* 🔥 인물 뷰 */}\n        {currentView === 'characters' && (\n          <div className=\"p-3\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>인물 관리</h3>\n              <button className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\">\n                <Plus size={16} />\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              {characters.map((character) => (\n                <div key={character.id} className={`${SIDEBAR_STYLES.structureItem} justify-between`}>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center text-white text-xs font-medium\">\n                      {character.name.charAt(0)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{character.name}</div>\n                      {character.role && (\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">{character.role}</div>\n                      )}\n                    </div>\n                  </div>\n                  <button className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\">\n                    <MoreHorizontal size={12} />\n                  </button>\n                </div>\n              ))}\n              {characters.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  <Users size={32} className=\"mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">인물을 추가해보세요</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* 🔥 메모 뷰 */}\n        {currentView === 'notes' && (\n          <div className=\"p-3\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>메모 관리</h3>\n              <button className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\">\n                <Plus size={16} />\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              {/* 🔥 임시 메모 데이터 (나중에 실제 데이터로 교체) */}\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                <BookOpen size={32} className=\"mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">메모를 추가해보세요</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1492, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/ProjectHeader.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { \n  ChevronLeft,\n  Save,\n  Share2,\n  Download,\n  Trash2,\n  Sidebar,\n  Eye,\n  EyeOff,\n  Palette,\n  MessageCircle,\n  Sun,\n  Moon,\n  Copy,\n  FileDown,\n  Focus\n} from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 프리컴파일된 스타일 (기가차드 원칙)\nconst PROJECT_HEADER_STYLES = {\n  header: 'flex items-center justify-between px-4 py-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 transition-colors duration-200',\n  headerLeft: 'flex items-center gap-3',\n  headerCenter: 'flex-1 max-w-md mx-auto',\n  headerRight: 'flex items-center gap-2 relative',\n  \n  backButton: 'flex items-center gap-2 px-3 py-1.5 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors',\n  titleInput: 'border-none bg-transparent focus:outline-none focus:ring-0 text-lg font-medium w-full placeholder:text-gray-400 dark:placeholder:text-gray-500 text-gray-900 dark:text-gray-100',\n  iconButton: 'flex items-center justify-center w-9 h-9 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-600 dark:text-gray-400 relative group',\n  iconButtonActive: 'flex items-center justify-center w-9 h-9 rounded-lg bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 relative group',\n  \n  // 툴팁 스타일\n  tooltip: 'absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-50',\n  tooltipWithShortcut: 'absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 px-3 py-2 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-50',\n  shortcut: 'block text-gray-400 text-xs mt-1',\n  \n  // 슬라이드바 스타일\n  slidebar: 'fixed top-0 right-0 h-full w-80 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 shadow-xl transform transition-transform duration-300 ease-in-out z-40',\n  slidebarOpen: 'translate-x-0',\n  slidebarClosed: 'translate-x-full',\n  slidebarHeader: 'flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700',\n  slidebarTitle: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n  slidebarContent: 'p-4 overflow-y-auto h-full',\n  slidebarOverlay: 'fixed inset-0 bg-black/50 z-30',\n} as const;\n\n// 🔥 HeaderAction 타입 정의\ninterface HeaderAction {\n  icon: React.ComponentType<{ size?: number }>;\n  label: string;\n  shortcut?: string;\n  onClick: () => void;\n  isActive?: boolean;\n}\n\n// 슬라이드바 타입 (테마 제거)\ntype SlidebarType = 'ai' | null;\n\ninterface ProjectHeaderProps {\n  title: string;\n  onTitleChange: (title: string) => void;\n  onBack: () => void;\n  \n  // 🔥 사이드바 컨트롤\n  sidebarCollapsed: boolean;\n  onToggleSidebar: () => void;\n  \n  // 🔥 포커스 모드 컨트롤\n  isFocusMode: boolean;\n  onToggleFocusMode: () => void;\n  \n  // 🔥 프로젝트 액션들\n  onSave: () => void;\n  onShare: () => void;\n  onDownload: () => void;\n  onDelete: () => void;\n}\n\nexport function ProjectHeader({\n  title,\n  onTitleChange,\n  onBack,\n  sidebarCollapsed,\n  onToggleSidebar,\n  isFocusMode,\n  onToggleFocusMode,\n  onSave,\n  onShare,\n  onDownload,\n  onDelete\n}: ProjectHeaderProps): React.ReactElement {\n  \n  const [activeSlideBar, setActiveSlideBar] = useState<SlidebarType>(null);\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(\n    document.documentElement.classList.contains('dark')\n  );\n  \n  // 🔥 슬라이드바 토글 함수\n  const toggleSlideBar = (type: SlidebarType): void => {\n    setActiveSlideBar(activeSlideBar === type ? null : type);\n  };\n  \n  // 🔥 테마 원클릭 토글\n  const toggleTheme = (): void => {\n    const newDarkMode = !isDarkMode;\n    setIsDarkMode(newDarkMode);\n    \n    if (newDarkMode) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n    \n    Logger.info('PROJECT_HEADER', `Theme changed to ${newDarkMode ? 'dark' : 'light'}`);\n};\n  \n  // 🔥 복사 기능 (현재 텍스트 클립보드에 복사)\n  const handleCopy = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(title);\n      Logger.info('PROJECT_HEADER', 'Project title copied to clipboard');\n      // TODO: 토스트 알림 추가\n    } catch (error) {\n      Logger.error('PROJECT_HEADER', 'Failed to copy to clipboard', error);\n    }\n  };\n\n  // 🔥 에디터 전용모드 토글\n  const handleEditorOnlyMode = (): void => {\n    const isEditorOnly = document.body.classList.contains('editor-only-mode');\n    \n    if (isEditorOnly) {\n      document.body.classList.remove('editor-only-mode');\n      Logger.info('PROJECT_HEADER', 'Editor-only mode disabled');\n    } else {\n      document.body.classList.add('editor-only-mode');\n      Logger.info('PROJECT_HEADER', 'Editor-only mode enabled');\n    }\n  };\n\n  // 🔥 헤더 액션 정의 (CRUD + 복사, 공유 개선)\n  const headerActions: HeaderAction[] = [\n    { icon: Save, label: '저장', shortcut: 'Cmd+S', onClick: onSave },\n    { icon: Copy, label: '복사', shortcut: 'Cmd+C', onClick: handleCopy },\n    { icon: Share2, label: '공유', shortcut: 'Cmd+Shift+S', onClick: onShare },\n    { icon: FileDown, label: '내보내기', shortcut: 'Cmd+E', onClick: onDownload },\n    { icon: Trash2, label: '삭제', shortcut: 'Cmd+Del', onClick: onDelete },\n  ];\n\n  // 🔥 툴바 확장 액션들 (AI 채팅, 테마 원클릭, 에디터 전용모드)\n  const toolbarActions: HeaderAction[] = [\n    { icon: MessageCircle, label: 'AI 채팅', onClick: () => toggleSlideBar('ai') },\n    { \n      icon: isDarkMode ? Sun : Moon, \n      label: isDarkMode ? '라이트 모드로 변경' : '다크 모드로 변경', \n      onClick: toggleTheme \n    },\n    { icon: Focus, label: '에디터 전용모드', onClick: handleEditorOnlyMode },\n  ];\n\n  return (\n    <> \n      <div className={PROJECT_HEADER_STYLES.header}>\n        {/* 🔥 왼쪽: 뒤로가기 + 네비게이션 */}\n        <div className={PROJECT_HEADER_STYLES.headerLeft}>\n          <button \n            className={PROJECT_HEADER_STYLES.backButton}\n            onClick={onBack}\n          >\n            <ChevronLeft size={16} />\n            <span>프로젝트 목록</span>\n          </button>\n        </div>\n\n        {/* 🔥 중앙: 프로젝트 제목 */}\n        <div className={PROJECT_HEADER_STYLES.headerCenter}>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={(e) => onTitleChange(e.target.value)}\n            placeholder=\"프로젝트 제목을 입력하세요\"\n            className={PROJECT_HEADER_STYLES.titleInput}\n          />\n        </div>\n\n        {/* 🔥 오른쪽: 액션 버튼들 */}\n        <div className={PROJECT_HEADER_STYLES.headerRight}>\n          {/* 프로젝트 액션들 */}\n          {headerActions.map((action, index) => (\n            <button\n              key={`action-${index}`}\n              className={PROJECT_HEADER_STYLES.iconButton}\n              onClick={action.onClick}\n            >\n              <action.icon size={16} />\n              <div className={PROJECT_HEADER_STYLES.tooltipWithShortcut}>\n                <div>{action.label}</div>\n                {action.shortcut && <div className={PROJECT_HEADER_STYLES.shortcut}>{action.shortcut}</div>}\n              </div>\n            </button>\n          ))}\n          \n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n          \n          {/* 툴바 확장 액션들 */}\n          {toolbarActions.map((action, index) => (\n            <button\n              key={`toolbar-${index}`}\n              className={PROJECT_HEADER_STYLES.iconButton}\n              onClick={action.onClick}\n            >\n              <action.icon size={16} />\n              <div className={PROJECT_HEADER_STYLES.tooltip}>\n                {action.label}\n              </div>\n            </button>\n          ))}\n          \n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n          \n          {/* UI 컨트롤들 */}\n          <button \n            className={sidebarCollapsed ? PROJECT_HEADER_STYLES.iconButton : PROJECT_HEADER_STYLES.iconButtonActive}\n            onClick={onToggleSidebar}\n          >\n            <Sidebar size={16} />\n            <div className={PROJECT_HEADER_STYLES.tooltip}>\n              사이드바 토글\n            </div>\n          </button>\n          \n          <button \n            className={isFocusMode ? PROJECT_HEADER_STYLES.iconButtonActive : PROJECT_HEADER_STYLES.iconButton}\n            onClick={onToggleFocusMode}\n          >\n            {isFocusMode ? <EyeOff size={16} /> : <Eye size={16} />}\n            <div className={PROJECT_HEADER_STYLES.tooltip}>\n              {isFocusMode ? '포커스 모드 해제' : '포커스 모드'}\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* 🔥 슬라이드바 오버레이 */}\n      {activeSlideBar && (\n        <div \n          className={PROJECT_HEADER_STYLES.slidebarOverlay}\n          onClick={() => setActiveSlideBar(null)}\n        />\n      )}\n\n      {/* 🔥 AI 채팅 슬라이드바 */}\n      <div className={`${PROJECT_HEADER_STYLES.slidebar} ${\n        activeSlideBar === 'ai' ? PROJECT_HEADER_STYLES.slidebarOpen : PROJECT_HEADER_STYLES.slidebarClosed\n      }`}>\n        <div className={PROJECT_HEADER_STYLES.slidebarHeader}>\n          <h3 className={PROJECT_HEADER_STYLES.slidebarTitle}>AI 어시스턴트</h3>\n          <button \n            className={PROJECT_HEADER_STYLES.iconButton}\n            onClick={() => setActiveSlideBar(null)}\n          >\n            ✕\n          </button>\n        </div>\n        <div className={PROJECT_HEADER_STYLES.slidebarContent}>\n          {/* 채팅 인터페이스 */}\n          <div className=\"flex flex-col h-full\">\n            {/* 채팅 메시지 영역 */}\n            <div className=\"flex-1 overflow-y-auto mb-4 space-y-3\">\n              <div className=\"bg-blue-50 dark:bg-blue-950/20 p-3 rounded-lg\">\n                <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n                  안녕하세요! 글쓰기를 도와드릴 AI 어시스턴트입니다. 어떻게 도와드릴까요?\n                </p>\n              </div>\n            </div>\n            \n            {/* 빠른 액션 버튼들 */}\n            <div className=\"space-y-2 mb-4\">\n              <button \n                className=\"w-full p-3 text-left border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                onClick={async () => {\n                  try {\n                    const result = await window.electronAPI.ai.improveText('선택된 텍스트 샘플');\n                    Logger.info('PROJECT_HEADER', 'Text improvement result', result);\n                  } catch (error) {\n                    Logger.error('PROJECT_HEADER', 'Text improvement failed', error);\n                  }\n                }}\n              >\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">✨ 문장 개선</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">선택한 텍스트를 더 자연스럽게 개선합니다</div>\n              </button>\n              <button \n                className=\"w-full p-3 text-left border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                onClick={async () => {\n                  try {\n                    const result = await window.electronAPI.ai.analyzeText('캐릭터 분석을 위한 텍스트');\n                    Logger.info('PROJECT_HEADER', 'Character analysis result', result);\n                  } catch (error) {\n                    Logger.error('PROJECT_HEADER', 'Character analysis failed', error);\n                  }\n                }}\n              >\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">🎭 등장인물 분석</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">캐릭터의 일관성을 검토합니다</div>\n              </button>\n              <button \n                className=\"w-full p-3 text-left border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                onClick={async () => {\n                  try {\n                    const result = await window.electronAPI.ai.getWritingHelp('플롯 구성에 대한 조언을 주세요');\n                    Logger.info('PROJECT_HEADER', 'Plot analysis result', result);\n                  } catch (error) {\n                    Logger.error('PROJECT_HEADER', 'Plot analysis failed', error);\n                  }\n                }}\n              >\n                <div className=\"font-medium text-gray-900 dark:text-gray-100\">📖 플롯 체크</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">스토리 흐름을 분석합니다</div>\n              </button>\n            </div>\n            \n            {/* 채팅 입력 영역 */}\n            <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\n              <div className=\"flex gap-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"AI에게 질문하거나 도움을 요청하세요...\"\n                  className=\"flex-1 px-3 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n                <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                  전송\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2067, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/ConfirmDeleteDialog.tsx"],"sourcesContent":["'use client';\n\n// 삭제 다이어로그 \n\nimport React, { useState } from 'react';\nimport { X as XIcon, AlertTriangle } from 'lucide-react';\n\n// 🔥 프리컴파일된 스타일 (11원칙 준수)\nconst CONFIRM_DIALOG_STYLES = {\n  overlay: 'fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-50',\n  dialog: 'bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-md w-full mx-4 overflow-hidden',\n  header: 'flex items-center gap-3 p-6 border-b border-slate-200 dark:border-slate-700',\n  icon: 'w-8 h-8 text-red-500 flex-shrink-0',\n  headerText: 'flex-1',\n  title: 'text-lg font-bold text-slate-900 dark:text-slate-100',\n  message: 'text-sm text-slate-600 dark:text-slate-400 mt-1',\n  closeButton: 'w-8 h-8 flex items-center justify-center rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors',\n  content: 'p-6',\n  description: 'text-slate-700 dark:text-slate-300 leading-relaxed mb-4',\n  projectName: 'font-semibold text-slate-900 dark:text-slate-100',\n  warning: 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3 text-sm text-red-800 dark:text-red-200',\n  footer: 'flex items-center justify-end gap-3 p-6 border-t border-slate-200 dark:border-slate-700',\n  cancelButton: 'px-4 py-2 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors',\n  deleteButton: 'px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-medium',\n} as const;\n\ninterface ConfirmDeleteDialogProps {\n  isOpen: boolean;\n  projectTitle: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nexport function ConfirmDeleteDialog({ isOpen, projectTitle, onConfirm, onCancel }: ConfirmDeleteDialogProps): React.ReactElement | null {\n  if (!isOpen) return null;\n\n  const handleOverlayClick = (event: React.MouseEvent): void => {\n    if (event.target === event.currentTarget) {\n      onCancel();\n    }\n  };\n\n  const handleEscapeKey = (event: React.KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      onCancel();\n    }\n  };\n\n  return (\n    <div \n      className={CONFIRM_DIALOG_STYLES.overlay} \n      onClick={handleOverlayClick}\n      onKeyDown={handleEscapeKey}\n      tabIndex={-1}\n    >\n      <div className={CONFIRM_DIALOG_STYLES.dialog}>\n        {/* 🔥 헤더 */}\n        <div className={CONFIRM_DIALOG_STYLES.header}>\n          <AlertTriangle className={CONFIRM_DIALOG_STYLES.icon} />\n          <div className={CONFIRM_DIALOG_STYLES.headerText}>\n            <h3 className={CONFIRM_DIALOG_STYLES.title}>프로젝트 삭제</h3>\n            <p className={CONFIRM_DIALOG_STYLES.message}>이 작업은 되돌릴 수 없습니다</p>\n          </div>\n          <button\n            className={CONFIRM_DIALOG_STYLES.closeButton}\n            onClick={onCancel}\n            aria-label=\"닫기\"\n          >\n            <XIcon size={20} />\n          </button>\n        </div>\n\n        {/* 🔥 내용 */}\n        <div className={CONFIRM_DIALOG_STYLES.content}>\n          <p className={CONFIRM_DIALOG_STYLES.description}>\n            <span className={CONFIRM_DIALOG_STYLES.projectName}>&ldquo;{projectTitle}&rdquo;</span> 프로젝트를 \n            완전히 삭제하시겠습니까?\n          </p>\n          \n          <div className={CONFIRM_DIALOG_STYLES.warning}>\n            ⚠️ <strong>주의:</strong> 삭제된 프로젝트와 모든 데이터(캐릭터, 구조, 메모 등)는 복구할 수 없습니다.\n          </div>\n        </div>\n\n        {/* 🔥 푸터 */}\n        <div className={CONFIRM_DIALOG_STYLES.footer}>\n          <button\n            className={CONFIRM_DIALOG_STYLES.cancelButton}\n            onClick={onCancel}\n          >\n            취소\n          </button>\n          <button\n            className={CONFIRM_DIALOG_STYLES.deleteButton}\n            onClick={onConfirm}\n            autoFocus\n          >\n            삭제하기\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAKA;AAAA;AALA;;;AAOA,0BAA0B;AAC1B,MAAM,wBAAwB;IAC5B,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,OAAO;IACP,SAAS;IACT,aAAa;IACb,SAAS;IACT,aAAa;IACb,aAAa;IACb,SAAS;IACT,QAAQ;IACR,cAAc;IACd,cAAc;AAChB;AASO,SAAS,oBAAoB,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAA4B;IACzG,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,qBAAqB,CAAC;QAC1B,IAAI,MAAM,MAAM,KAAK,MAAM,aAAa,EAAE;YACxC;QACF;IACF;IAEA,MAAM,kBAAkB,CAAC;QACvB,IAAI,MAAM,GAAG,KAAK,UAAU;YAC1B;QACF;IACF;IAEA,qBACE,+YAAC;QACC,WAAW,sBAAsB,OAAO;QACxC,SAAS;QACT,WAAW;QACX,UAAU,CAAC;kBAEX,cAAA,+YAAC;YAAI,WAAW,sBAAsB,MAAM;;8BAE1C,+YAAC;oBAAI,WAAW,sBAAsB,MAAM;;sCAC1C,+YAAC,6SAAA,CAAA,gBAAa;4BAAC,WAAW,sBAAsB,IAAI;;;;;;sCACpD,+YAAC;4BAAI,WAAW,sBAAsB,UAAU;;8CAC9C,+YAAC;oCAAG,WAAW,sBAAsB,KAAK;8CAAE;;;;;;8CAC5C,+YAAC;oCAAE,WAAW,sBAAsB,OAAO;8CAAE;;;;;;;;;;;;sCAE/C,+YAAC;4BACC,WAAW,sBAAsB,WAAW;4BAC5C,SAAS;4BACT,cAAW;sCAEX,cAAA,+YAAC,iRAAA,CAAA,IAAK;gCAAC,MAAM;;;;;;;;;;;;;;;;;8BAKjB,+YAAC;oBAAI,WAAW,sBAAsB,OAAO;;sCAC3C,+YAAC;4BAAE,WAAW,sBAAsB,WAAW;;8CAC7C,+YAAC;oCAAK,WAAW,sBAAsB,WAAW;;wCAAE;wCAAQ;wCAAa;;;;;;;gCAAc;;;;;;;sCAIzF,+YAAC;4BAAI,WAAW,sBAAsB,OAAO;;gCAAE;8CAC1C,+YAAC;8CAAO;;;;;;gCAAY;;;;;;;;;;;;;8BAK3B,+YAAC;oBAAI,WAAW,sBAAsB,MAAM;;sCAC1C,+YAAC;4BACC,WAAW,sBAAsB,YAAY;4BAC7C,SAAS;sCACV;;;;;;sCAGD,+YAAC;4BACC,WAAW,sBAAsB,YAAY;4BAC7C,SAAS;4BACT,SAAS;sCACV;;;;;;;;;;;;;;;;;;;;;;;AAOX","debugId":null}},
    {"offset": {"line": 2266, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/ShareDialog.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useCallback } from 'react';\nimport { X as XIcon, Share2, Copy, Check, Download, Mail } from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 프리컴파일된 스타일 (11원칙 준수)\nconst SHARE_DIALOG_STYLES = {\n  overlay: 'fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-50',\n  dialog: 'bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-lg w-full mx-4 overflow-hidden',\n  header: 'flex items-center gap-3 p-6 border-b border-slate-200 dark:border-slate-700',\n  icon: 'w-8 h-8 text-blue-500 flex-shrink-0',\n  headerText: 'flex-1',\n  title: 'text-lg font-bold text-slate-900 dark:text-slate-100',\n  subtitle: 'text-sm text-slate-600 dark:text-slate-400 mt-1',\n  closeButton: 'w-8 h-8 flex items-center justify-center rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors',\n  content: 'p-6 space-y-4',\n  section: 'space-y-3',\n  sectionTitle: 'text-sm font-medium text-slate-900 dark:text-slate-100',\n  optionGrid: 'grid grid-cols-2 gap-3',\n  option: 'flex items-center gap-3 p-4 border border-slate-200 dark:border-slate-700 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700/50 transition-colors cursor-pointer',\n  optionIcon: 'w-5 h-5 text-slate-600 dark:text-slate-400',\n  optionText: 'text-sm text-slate-700 dark:text-slate-300',\n  urlSection: 'space-y-2',\n  urlLabel: 'text-sm font-medium text-slate-900 dark:text-slate-100',\n  urlContainer: 'flex items-center gap-2',\n  urlInput: 'flex-1 px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded-lg text-sm text-slate-900 dark:text-slate-100 font-mono',\n  copyButton: 'px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors text-sm font-medium flex items-center gap-2',\n  copiedButton: 'px-3 py-2 bg-green-600 text-white rounded-lg text-sm font-medium flex items-center gap-2',\n  footer: 'p-6 border-t border-slate-200 dark:border-slate-700 text-xs text-slate-500 dark:text-slate-400',\n} as const;\n\ninterface ShareDialogProps {\n  isOpen: boolean;\n  projectTitle: string;\n  projectId: string;\n  onClose: () => void;\n}\n\nexport function ShareDialog({ isOpen, projectTitle, projectId, onClose }: ShareDialogProps): React.ReactElement | null {\n  const [copiedUrl, setCopiedUrl] = useState<boolean>(false);\n\n  // 🔥 임시 공유 URL (실제로는 서버에서 생성)\n  const shareUrl = `https://loop-writer.app/shared/${projectId}`;\n\n  const handleOverlayClick = (event: React.MouseEvent): void => {\n    if (event.target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleEscapeKey = (event: React.KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleCopyUrl = useCallback(async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopiedUrl(true);\n      Logger.info('SHARE_DIALOG', 'URL copied to clipboard');\n      \n      // 3초 후 상태 리셋\n      setTimeout(() => setCopiedUrl(false), 3000);\n    } catch (error) {\n      Logger.error('SHARE_DIALOG', 'Failed to copy URL', error);\n    }\n  }, [shareUrl]);\n\n  const handleExportText = useCallback((): void => {\n    // 🔥 텍스트 파일로 내보내기 (실제 구현 필요)\n    Logger.info('SHARE_DIALOG', 'Export as text requested');\n    // TODO: 실제 내보내기 구현\n  }, []);\n\n  const handleExportPdf = useCallback((): void => {\n    // 🔥 PDF로 내보내기 (실제 구현 필요)\n    Logger.info('SHARE_DIALOG', 'Export as PDF requested');\n    // TODO: 실제 PDF 내보내기 구현\n  }, []);\n\n  const handleSendEmail = useCallback((): void => {\n    // 🔥 이메일로 공유하기\n    const subject = encodeURIComponent(`Loop 프로젝트: ${projectTitle}`);\n    const body = encodeURIComponent(`안녕하세요,\\n\\n\"${projectTitle}\" 프로젝트를 공유합니다.\\n\\n${shareUrl}\\n\\nLoop Writer에서 확인해보세요!`);\n    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;\n    \n    window.open(mailtoUrl, '_blank');\n    Logger.info('SHARE_DIALOG', 'Email sharing opened');\n  }, [projectTitle, shareUrl]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className={SHARE_DIALOG_STYLES.overlay} \n      onClick={handleOverlayClick}\n      onKeyDown={handleEscapeKey}\n      tabIndex={-1}\n    >\n      <div className={SHARE_DIALOG_STYLES.dialog}>\n        {/* 🔥 헤더 */}\n        <div className={SHARE_DIALOG_STYLES.header}>\n          <Share2 className={SHARE_DIALOG_STYLES.icon} />\n          <div className={SHARE_DIALOG_STYLES.headerText}>\n            <h3 className={SHARE_DIALOG_STYLES.title}>프로젝트 공유</h3>\n            <p className={SHARE_DIALOG_STYLES.subtitle}>&ldquo;{projectTitle}&rdquo; 작품 공유하기</p>\n          </div>\n          <button\n            className={SHARE_DIALOG_STYLES.closeButton}\n            onClick={onClose}\n            aria-label=\"닫기\"\n          >\n            <XIcon size={20} />\n          </button>\n        </div>\n\n        {/* 🔥 내용 */}\n        <div className={SHARE_DIALOG_STYLES.content}>\n          {/* 🔥 링크 공유 */}\n          <div className={SHARE_DIALOG_STYLES.section}>\n            <h4 className={SHARE_DIALOG_STYLES.sectionTitle}>링크로 공유</h4>\n            <div className={SHARE_DIALOG_STYLES.urlContainer}>\n              <input\n                type=\"text\"\n                value={shareUrl}\n                readOnly\n                className={SHARE_DIALOG_STYLES.urlInput}\n              />\n              <button\n                className={copiedUrl ? SHARE_DIALOG_STYLES.copiedButton : SHARE_DIALOG_STYLES.copyButton}\n                onClick={handleCopyUrl}\n                disabled={copiedUrl}\n              >\n                {copiedUrl ? (\n                  <>\n                    <Check size={16} />\n                    복사됨\n                  </>\n                ) : (\n                  <>\n                    <Copy size={16} />\n                    복사\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* 🔥 공유 옵션 */}\n          <div className={SHARE_DIALOG_STYLES.section}>\n            <h4 className={SHARE_DIALOG_STYLES.sectionTitle}>공유 방법</h4>\n            <div className={SHARE_DIALOG_STYLES.optionGrid}>\n              <button\n                className={SHARE_DIALOG_STYLES.option}\n                onClick={handleSendEmail}\n              >\n                <Mail className={SHARE_DIALOG_STYLES.optionIcon} />\n                <span className={SHARE_DIALOG_STYLES.optionText}>이메일</span>\n              </button>\n              \n              <button\n                className={SHARE_DIALOG_STYLES.option}\n                onClick={handleExportText}\n              >\n                <Download className={SHARE_DIALOG_STYLES.optionIcon} />\n                <span className={SHARE_DIALOG_STYLES.optionText}>텍스트 파일</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* 🔥 푸터 */}\n        <div className={SHARE_DIALOG_STYLES.footer}>\n          💡 공유된 프로젝트는 읽기 전용으로 제공됩니다. 원본 편집은 작성자만 가능합니다.\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;;;;;AAMA,0BAA0B;AAC1B,MAAM,sBAAsB;IAC1B,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,OAAO;IACP,UAAU;IACV,aAAa;IACb,SAAS;IACT,SAAS;IACT,cAAc;IACd,YAAY;IACZ,QAAQ;IACR,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,cAAc;IACd,UAAU;IACV,YAAY;IACZ,cAAc;IACd,QAAQ;AACV;AASO,SAAS,YAAY,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,OAAO,EAAoB;IACxF,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,sWAAA,CAAA,WAAQ,AAAD,EAAW;IAEpD,8BAA8B;IAC9B,MAAM,WAAW,CAAC,+BAA+B,EAAE,WAAW;IAE9D,MAAM,qBAAqB,CAAC;QAC1B,IAAI,MAAM,MAAM,KAAK,MAAM,aAAa,EAAE;YACxC;QACF;IACF;IAEA,MAAM,kBAAkB,CAAC;QACvB,IAAI,MAAM,GAAG,KAAK,UAAU;YAC1B;QACF;IACF;IAEA,MAAM,gBAAgB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QAChC,IAAI;YACF,MAAM,UAAU,SAAS,CAAC,SAAS,CAAC;YACpC,aAAa;YACb,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;YAE5B,aAAa;YACb,WAAW,IAAM,aAAa,QAAQ;QACxC,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,sBAAsB;QACrD;IACF,GAAG;QAAC;KAAS;IAEb,MAAM,mBAAmB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QACnC,6BAA6B;QAC7B,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;IAC5B,mBAAmB;IACrB,GAAG,EAAE;IAEL,MAAM,kBAAkB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QAClC,0BAA0B;QAC1B,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;IAC5B,uBAAuB;IACzB,GAAG,EAAE;IAEL,MAAM,kBAAkB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QAClC,eAAe;QACf,MAAM,UAAU,mBAAmB,CAAC,WAAW,EAAE,cAAc;QAC/D,MAAM,OAAO,mBAAmB,CAAC,WAAW,EAAE,aAAa,kBAAkB,EAAE,SAAS,yBAAyB,CAAC;QAClH,MAAM,YAAY,CAAC,gBAAgB,EAAE,QAAQ,MAAM,EAAE,MAAM;QAE3D,OAAO,IAAI,CAAC,WAAW;QACvB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;IAC9B,GAAG;QAAC;QAAc;KAAS;IAE3B,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,+YAAC;QACC,WAAW,oBAAoB,OAAO;QACtC,SAAS;QACT,WAAW;QACX,UAAU,CAAC;kBAEX,cAAA,+YAAC;YAAI,WAAW,oBAAoB,MAAM;;8BAExC,+YAAC;oBAAI,WAAW,oBAAoB,MAAM;;sCACxC,+YAAC,+RAAA,CAAA,SAAM;4BAAC,WAAW,oBAAoB,IAAI;;;;;;sCAC3C,+YAAC;4BAAI,WAAW,oBAAoB,UAAU;;8CAC5C,+YAAC;oCAAG,WAAW,oBAAoB,KAAK;8CAAE;;;;;;8CAC1C,+YAAC;oCAAE,WAAW,oBAAoB,QAAQ;;wCAAE;wCAAQ;wCAAa;;;;;;;;;;;;;sCAEnE,+YAAC;4BACC,WAAW,oBAAoB,WAAW;4BAC1C,SAAS;4BACT,cAAW;sCAEX,cAAA,+YAAC,iRAAA,CAAA,IAAK;gCAAC,MAAM;;;;;;;;;;;;;;;;;8BAKjB,+YAAC;oBAAI,WAAW,oBAAoB,OAAO;;sCAEzC,+YAAC;4BAAI,WAAW,oBAAoB,OAAO;;8CACzC,+YAAC;oCAAG,WAAW,oBAAoB,YAAY;8CAAE;;;;;;8CACjD,+YAAC;oCAAI,WAAW,oBAAoB,YAAY;;sDAC9C,+YAAC;4CACC,MAAK;4CACL,OAAO;4CACP,QAAQ;4CACR,WAAW,oBAAoB,QAAQ;;;;;;sDAEzC,+YAAC;4CACC,WAAW,YAAY,oBAAoB,YAAY,GAAG,oBAAoB,UAAU;4CACxF,SAAS;4CACT,UAAU;sDAET,0BACC;;kEACE,+YAAC,yRAAA,CAAA,QAAK;wDAAC,MAAM;;;;;;oDAAM;;6EAIrB;;kEACE,+YAAC,uRAAA,CAAA,OAAI;wDAAC,MAAM;;;;;;oDAAM;;;;;;;;;;;;;;;;;;;;sCAS5B,+YAAC;4BAAI,WAAW,oBAAoB,OAAO;;8CACzC,+YAAC;oCAAG,WAAW,oBAAoB,YAAY;8CAAE;;;;;;8CACjD,+YAAC;oCAAI,WAAW,oBAAoB,UAAU;;sDAC5C,+YAAC;4CACC,WAAW,oBAAoB,MAAM;4CACrC,SAAS;;8DAET,+YAAC,uRAAA,CAAA,OAAI;oDAAC,WAAW,oBAAoB,UAAU;;;;;;8DAC/C,+YAAC;oDAAK,WAAW,oBAAoB,UAAU;8DAAE;;;;;;;;;;;;sDAGnD,+YAAC;4CACC,WAAW,oBAAoB,MAAM;4CACrC,SAAS;;8DAET,+YAAC,+RAAA,CAAA,WAAQ;oDAAC,WAAW,oBAAoB,UAAU;;;;;;8DACnD,+YAAC;oDAAK,WAAW,oBAAoB,UAAU;8DAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAOzD,+YAAC;oBAAI,WAAW,oBAAoB,MAAM;8BAAE;;;;;;;;;;;;;;;;;AAMpD","debugId":null}},
    {"offset": {"line": 2605, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/MarkdownEditor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { useEditor, EditorContent, BubbleMenu } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Focus from '@tiptap/extension-focus';\nimport Typography from '@tiptap/extension-typography';\nimport CharacterCount from '@tiptap/extension-character-count';\nimport Underline from '@tiptap/extension-underline';\nimport { Logger } from '../../../../shared/logger';\nimport { handleEditorKeyDown, bindShortcutsToEditor, ALL_SHORTCUTS } from './EditorShortcuts';\n\n// 🔥 작가 친화적 TipTap 에디터 스타일\nconst EDITOR_STYLES = {\n  container: 'w-full h-full flex flex-col',\n  editor: 'flex-1 p-6 prose prose-slate max-w-none focus:outline-none',\n  focused: 'prose-lg', // 포커스 모드에서 더 큰 글자\n  placeholder: 'text-slate-400 pointer-events-none',\n  bubble: 'flex gap-2 p-2 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg shadow-lg',\n  bubbleButton: 'px-3 py-1 text-sm bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 rounded transition-colors'\n} as const;\n\ninterface MarkdownEditorProps {\n  content: string;\n  onChange: (content: string) => void;\n  isFocusMode: boolean;\n}\n\nexport function MarkdownEditor({ content, onChange, isFocusMode }: MarkdownEditorProps): React.ReactElement {\n  const [isReady, setIsReady] = useState(false);\n\n  // 🔥 TipTap 에디터 초기화 (Notion 스타일 + 작가 친화적 설정)\n  const editor = useEditor({\n    extensions: [\n      StarterKit.configure({\n        // 🔥 작가 친화적 설정\n        heading: {\n          levels: [1, 2, 3, 4] // H1~H4만 사용\n        },\n        bulletList: {\n          HTMLAttributes: {\n            class: 'list-disc list-outside ml-6'\n          }\n        },\n        orderedList: {\n          HTMLAttributes: {\n            class: 'list-decimal list-outside ml-6'\n          }\n        }\n      }),\n      \n      // 🔥 언더라인 확장\n      Underline,\n      \n      // 🔥 Placeholder 확장 (작가 친화적)\n      Placeholder.configure({\n        placeholder: ({ node }) => {\n          if (node.type.name === 'heading') {\n            const level = node.attrs.level;\n            switch (level) {\n              case 1: return '제목을 입력하세요...';\n              case 2: return '챕터 제목...';\n              case 3: return '섹션 제목...';\n              default: return '소제목...';\n            }\n          }\n          return '이야기를 시작해보세요...';\n        },\n        showOnlyWhenEditable: true,\n        showOnlyCurrent: false,\n      }),\n      \n      // 🔥 Focus 확장 (포커스 모드)\n      Focus.configure({\n        className: 'has-focus',\n        mode: 'all',\n      }),\n      \n      // 🔥 Typography 확장 (작가 친화적 타이포그래피)\n      Typography.configure({\n        openDoubleQuote: '\"',\n        closeDoubleQuote: '\"',\n        openSingleQuote: \"'\",\n        closeSingleQuote: \"'\",\n        ellipsis: '...',\n        emDash: '--',\n      }),\n      \n      // 🔥 문자 수 카운트\n      CharacterCount,\n    ],\n    \n    content,\n    \n    // 🔥 에디터 설정\n    editorProps: {\n      attributes: {\n        class: `${EDITOR_STYLES.editor} ${isFocusMode ? EDITOR_STYLES.focused : ''}`,\n        'data-placeholder': '이야기를 시작해보세요...',\n      },\n      \n      // 🔥 강화된 노션 스타일 키보드 핸들러\n      handleKeyDown: (view, event) => {\n        const { state, dispatch } = view;\n        const { selection } = state;\n        \n        // 🔥 Space 키 마크다운 처리 최우선 (노션 스타일)\n        if (event.key === ' ') {\n          const { $from } = selection;\n          const textBefore = $from.parent.textContent.slice(0, $from.parentOffset);\n          \n          // # 처리 (제목 1)\n          if (textBefore === '#') {\n            event.preventDefault();\n            event.stopPropagation();\n            // heading 노드 타입이 있는지 확인\n            const headingType = state.schema.nodes.heading;\n            if (!headingType) {\n              Logger.warn('TIPTAP_EDITOR', 'Heading node type not found');\n              return false;\n            }\n            \n            const tr = state.tr.setBlockType($from.before(), $from.after(), headingType, { level: 1 });\n            tr.delete($from.pos - 1, $from.pos); // # 문자 삭제\n            dispatch(tr);\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: H1 applied');\n            return true;\n          }\n          \n          // ## 처리 (제목 2)\n          if (textBefore === '##') {\n            event.preventDefault();\n            event.stopPropagation();\n            // heading 노드 타입이 있는지 확인\n            const headingType = state.schema.nodes.heading;\n            if (!headingType) {\n              Logger.warn('TIPTAP_EDITOR', 'Heading node type not found');\n              return false;\n            }\n            \n            const tr = state.tr.setBlockType($from.before(), $from.after(), headingType, { level: 2 });\n            tr.delete($from.pos - 2, $from.pos); // ## 문자 삭제\n            dispatch(tr);\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: H2 applied');\n            return true;\n          }\n          \n          // ### 처리 (제목 3)\n          if (textBefore === '###') {\n            event.preventDefault();\n            event.stopPropagation();\n            // heading 노드 타입이 있는지 확인\n            const headingType = state.schema.nodes.heading;\n            if (!headingType) {\n              Logger.warn('TIPTAP_EDITOR', 'Heading node type not found');\n              return false;\n            }\n            \n            const tr = state.tr.setBlockType($from.before(), $from.after(), headingType, { level: 3 });\n            tr.delete($from.pos - 3, $from.pos); // ### 문자 삭제\n            dispatch(tr);\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: H3 applied');\n            return true;\n          }\n          \n          // - 처리 (불릿 리스트)\n          if (textBefore === '-') {\n            event.preventDefault();\n            event.stopPropagation();\n            // listItem 및 bulletList 노드 타입 확인\n            const listItemType = state.schema.nodes.listItem;\n            const bulletListType = state.schema.nodes.bulletList;\n            \n            if (!listItemType || !bulletListType) {\n              Logger.warn('TIPTAP_EDITOR', 'List node types not found');\n              return false;\n            }\n            \n            const tr = state.tr.setBlockType($from.before(), $from.after(), listItemType);\n            tr.delete($from.pos - 1, $from.pos); // - 문자 삭제\n            const blockRange = $from.blockRange();\n            if (blockRange) {\n              const wrappedTr = tr.wrap(blockRange, [{ type: bulletListType }]);\n              dispatch(wrappedTr || tr);\n            } else {\n              dispatch(tr);\n            }\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: Bullet list applied');\n            return true;\n          }\n          \n          // 1. 처리 (번호 리스트)\n          if (/^\\d+\\.$/.test(textBefore)) {\n            event.preventDefault();\n            event.stopPropagation();\n            // listItem 및 orderedList 노드 타입 확인\n            const listItemType = state.schema.nodes.listItem;\n            const orderedListType = state.schema.nodes.orderedList;\n            \n            if (!listItemType || !orderedListType) {\n              Logger.warn('TIPTAP_EDITOR', 'List node types not found');\n              return false;\n            }\n            \n            const tr = state.tr.setBlockType($from.before(), $from.after(), listItemType);\n            tr.delete($from.pos - textBefore.length, $from.pos); // 번호 문자 삭제\n            const blockRange = $from.blockRange();\n            if (blockRange) {\n              const wrappedTr = tr.wrap(blockRange, [{ type: orderedListType }]);\n              dispatch(wrappedTr || tr);\n            } else {\n              dispatch(tr);\n            }\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: Ordered list applied');\n            return true;\n          }\n        }\n        \n        // 🔥 Space 외의 키는 단축키 시스템에서 처리\n        // 단, Ctrl/Cmd와 조합된 키만 단축키로 처리\n        const isShortcutKey = event.ctrlKey || event.metaKey || event.altKey || ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'].includes(event.key);\n        \n        if (isShortcutKey && handleEditorKeyDown(editor, event)) {\n          return true;\n        }\n        \n        return false;\n      },\n    },\n    \n    // 🔥 콘텐츠 변경 핸들러\n    onUpdate: ({ editor }) => {\n      const newContent = editor.getHTML();\n      onChange(newContent);\n      Logger.debug('TIPTAP_EDITOR', 'Content updated', { \n        wordCount: editor.storage.characterCount?.words() || 0 \n      });\n    },\n    \n    // 🔥 에디터 준비 완료\n    onCreate: ({ editor }) => {\n      setIsReady(true);\n      Logger.info('TIPTAP_EDITOR', 'Editor created successfully');\n    },\n    \n    // 🔥 에디터 포커스\n    onFocus: ({ editor }) => {\n      Logger.debug('TIPTAP_EDITOR', 'Editor focused');\n    },\n    \n    // 🔥 에디터 블러\n    onBlur: ({ editor }) => {\n      Logger.debug('TIPTAP_EDITOR', 'Editor blurred');\n    },\n  });\n\n  // 🔥 외부 content 변경 시 에디터 업데이트\n  useEffect(() => {\n    if (editor && content !== editor.getHTML()) {\n      editor.commands.setContent(content, false);\n    }\n  }, [content, editor]);\n\n  // 🔥 포커스 모드 변경 시 클래스 업데이트\n  useEffect(() => {\n    if (editor) {\n      const editorElement = editor.view.dom as HTMLElement;\n      editorElement.className = `${EDITOR_STYLES.editor} ${isFocusMode ? EDITOR_STYLES.focused : ''}`;\n    }\n  }, [isFocusMode, editor]);\n\n  // 🔥 단축키 바인딩 및 저장 이벤트 리스너\n  useEffect(() => {\n    if (!editor) return;\n\n    // 🔥 단축키 바인딩\n    const unbindShortcuts = bindShortcutsToEditor(editor);\n    \n    // 🔥 저장 이벤트 리스너 (Ctrl+S)\n    const handleSave = () => {\n      const saveEvent = new CustomEvent('project:save');\n      window.dispatchEvent(saveEvent);\n      Logger.info('TIPTAP_EDITOR', 'Save event triggered from editor');\n    };\n    \n    window.addEventListener('editor:save', handleSave);\n    \n    Logger.info('TIPTAP_EDITOR', 'Shortcuts and save event bound', {\n      shortcutCount: ALL_SHORTCUTS.length\n    });\n\n    // 🔥 정리 함수\n    return () => {\n      unbindShortcuts();\n      window.removeEventListener('editor:save', handleSave);\n      Logger.debug('TIPTAP_EDITOR', 'Shortcuts and events unbound');\n    };\n  }, [editor]);\n\n  // 🔥 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      if (editor) {\n        editor.destroy();\n        Logger.debug('TIPTAP_EDITOR', 'Editor destroyed');\n      }\n    };\n  }, [editor]);\n\n  // 🔥 로딩 중 표시\n  if (!isReady) {\n    return (\n      <div className={EDITOR_STYLES.container}>\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"flex flex-col items-center gap-4\">\n            <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n            <span className=\"text-slate-500 text-sm\">에디터 준비 중...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={EDITOR_STYLES.container}>\n      {/* 🔥 Bubble Menu (선택 시 나타나는 툴바) */}\n      {editor && (\n        <BubbleMenu editor={editor} className={EDITOR_STYLES.bubble}>\n          <button\n            onClick={() => editor.chain().focus().toggleBold().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${\n              editor.isActive('bold') ? 'bg-blue-200 dark:bg-blue-800' : ''\n            }`}\n            title=\"볼드 (Ctrl+B)\"\n          >\n            <strong>B</strong>\n          </button>\n          <button\n            onClick={() => editor.chain().focus().toggleItalic().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${\n              editor.isActive('italic') ? 'bg-blue-200 dark:bg-blue-800' : ''\n            }`}\n            title=\"이탤릭 (Ctrl+I)\"\n          >\n            <em>I</em>\n          </button>\n          <button\n            onClick={() => editor.chain().focus().toggleUnderline().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${\n              editor.isActive('underline') ? 'bg-blue-200 dark:bg-blue-800' : ''\n            }`}\n            title=\"언더라인 (Ctrl+U)\"\n          >\n            <u>U</u>\n          </button>\n          <button\n            onClick={() => editor.chain().focus().toggleStrike().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${\n              editor.isActive('strike') ? 'bg-blue-200 dark:bg-blue-800' : ''\n            }`}\n            title=\"취소선 (Ctrl+Shift+S)\"\n          >\n            <s>S</s>\n          </button>\n          <button\n            onClick={() => editor.chain().focus().toggleCode().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${\n              editor.isActive('code') ? 'bg-blue-200 dark:bg-blue-800' : ''\n            }`}\n            title=\"코드\"\n          >\n            Code\n          </button>\n        </BubbleMenu>\n      )}\n      \n      {/* 🔥 메인 에디터 */}\n      <EditorContent editor={editor} />\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3076, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/WriteView.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { MarkdownEditor } from '../editor/MarkdownEditor';\n\ninterface WriteViewProps {\n  content: string;\n  onChange: (content: string) => void;\n  isFocusMode: boolean;\n}\n\n// 🔥 프리컴파일된 스타일 (11원칙 준수)\nconst WRITE_STYLES = {\n  container: 'flex-1 flex flex-col h-full bg-white dark:bg-gray-900',\n  editorWrapper: 'flex-1 min-h-0 overflow-hidden',\n} as const;\n\nexport function WriteView({ content, onChange, isFocusMode }: WriteViewProps): React.ReactElement {\n  return (\n    <div className={WRITE_STYLES.container}>\n      <div className={WRITE_STYLES.editorWrapper}>\n        <MarkdownEditor\n          content={content}\n          onChange={onChange}\n          isFocusMode={isFocusMode}\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAWA,0BAA0B;AAC1B,MAAM,eAAe;IACnB,WAAW;IACX,eAAe;AACjB;AAEO,SAAS,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAkB;IAC1E,qBACE,+YAAC;QAAI,WAAW,aAAa,SAAS;kBACpC,cAAA,+YAAC;YAAI,WAAW,aAAa,aAAa;sBACxC,cAAA,+YAAC,sKAAA,CAAA,iBAAc;gBACb,SAAS;gBACT,UAAU;gBACV,aAAa;;;;;;;;;;;;;;;;AAKvB","debugId":null}},
    {"offset": {"line": 3120, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/StructureView.tsx"],"sourcesContent":["'use client';\n\n// 스토리 뷰 쓰고있음\n\nimport React from 'react';\nimport { ProjectStructure } from '../../../../shared/types';\nimport { FileText, Hash, Bookmark, Plus } from 'lucide-react';\n\ninterface StructureViewProps {\n  structure: ProjectStructure[];\n  onStructureChange: (structure: ProjectStructure[]) => void;\n}\n\n// 🔥 차분하고 전문적인 구조 스타일 (11원칙 준수)\nconst STRUCTURE_STYLES = {\n  container: 'flex-1 overflow-hidden bg-white dark:bg-gray-900',\n  header: 'p-6 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700',\n  title: 'text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2',\n  subtitle: 'text-gray-600 dark:text-gray-400',\n  content: 'flex-1 overflow-y-auto p-6',\n  \n  // 구조 아이템\n  structureList: 'space-y-2',\n  structureItem: 'flex items-center gap-3 p-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-sm hover:border-gray-300 dark:hover:border-gray-600 transition-all duration-200 cursor-pointer',\n  itemIcon: 'w-5 h-5 text-blue-600 dark:text-blue-400',\n  itemContent: 'flex-1',\n  itemTitle: 'font-medium text-gray-900 dark:text-gray-100',\n  itemType: 'text-xs text-gray-500 dark:text-gray-400',\n  \n  // 추가 버튼\n  addButton: 'flex items-center gap-2 w-full p-3 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-gray-600 dark:text-gray-400 hover:border-blue-400 hover:text-blue-600 transition-colors',\n} as const;\n\n// 타입별 아이콘 매핑\nconst TYPE_ICONS = {\n  chapter: Hash,\n  scene: FileText,\n  note: Bookmark,\n} as const;\n\nexport function StructureView({ structure, onStructureChange }: StructureViewProps): React.ReactElement {\n  \n  const handleAddItem = (): void => {\n    const newItem: ProjectStructure = {\n      id: Date.now().toString(),\n      projectId: structure[0]?.projectId || '',\n      type: 'scene',\n      title: '새 장면',\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    onStructureChange([...structure, newItem]);\n  };\n\n  return (\n    <div className={STRUCTURE_STYLES.container}>\n      {/* 헤더 */}\n      <div className={STRUCTURE_STYLES.header}>\n        <h2 className={STRUCTURE_STYLES.title}>스토리 구조</h2>\n        <p className={STRUCTURE_STYLES.subtitle}>\n          장, 장면, 메모를 관리하여 이야기의 흐름을 구성하세요\n        </p>\n      </div>\n      \n      {/* 구조 목록 */}\n      <div className={STRUCTURE_STYLES.content}>\n        <div className={STRUCTURE_STYLES.structureList}>\n          {structure.map((item) => {\n            const IconComponent = TYPE_ICONS[item.type as keyof typeof TYPE_ICONS] || FileText;\n            \n            return (\n              <div key={item.id} className={STRUCTURE_STYLES.structureItem}>\n                <IconComponent className={STRUCTURE_STYLES.itemIcon} />\n                <div className={STRUCTURE_STYLES.itemContent}>\n                  <div className={STRUCTURE_STYLES.itemTitle}>{item.title}</div>\n                  <div className={STRUCTURE_STYLES.itemType}>\n                    {item.type === 'chapter' ? '장' : \n                     item.type === 'scene' ? '장면' : '메모'}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          \n          {/* 추가 버튼 */}\n          <button \n            onClick={handleAddItem}\n            className={STRUCTURE_STYLES.addButton}\n          >\n            <Plus className=\"w-5 h-5\" />\n            <span>새 항목 추가</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAMA;AAAA;AAAA;AAAA;AANA;;;AAaA,gCAAgC;AAChC,MAAM,mBAAmB;IACvB,WAAW;IACX,QAAQ;IACR,OAAO;IACP,UAAU;IACV,SAAS;IAET,SAAS;IACT,eAAe;IACf,eAAe;IACf,UAAU;IACV,aAAa;IACb,WAAW;IACX,UAAU;IAEV,QAAQ;IACR,WAAW;AACb;AAEA,aAAa;AACb,MAAM,aAAa;IACjB,SAAS,uRAAA,CAAA,OAAI;IACb,OAAO,mSAAA,CAAA,WAAQ;IACf,MAAM,+RAAA,CAAA,WAAQ;AAChB;AAEO,SAAS,cAAc,EAAE,SAAS,EAAE,iBAAiB,EAAsB;IAEhF,MAAM,gBAAgB;QACpB,MAAM,UAA4B;YAChC,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB,WAAW,SAAS,CAAC,EAAE,EAAE,aAAa;YACtC,MAAM;YACN,OAAO;YACP,UAAU;YACV,WAAW,IAAI;YACf,WAAW,IAAI;QACjB;QAEA,kBAAkB;eAAI;YAAW;SAAQ;IAC3C;IAEA,qBACE,+YAAC;QAAI,WAAW,iBAAiB,SAAS;;0BAExC,+YAAC;gBAAI,WAAW,iBAAiB,MAAM;;kCACrC,+YAAC;wBAAG,WAAW,iBAAiB,KAAK;kCAAE;;;;;;kCACvC,+YAAC;wBAAE,WAAW,iBAAiB,QAAQ;kCAAE;;;;;;;;;;;;0BAM3C,+YAAC;gBAAI,WAAW,iBAAiB,OAAO;0BACtC,cAAA,+YAAC;oBAAI,WAAW,iBAAiB,aAAa;;wBAC3C,UAAU,GAAG,CAAC,CAAC;4BACd,MAAM,gBAAgB,UAAU,CAAC,KAAK,IAAI,CAA4B,IAAI,mSAAA,CAAA,WAAQ;4BAElF,qBACE,+YAAC;gCAAkB,WAAW,iBAAiB,aAAa;;kDAC1D,+YAAC;wCAAc,WAAW,iBAAiB,QAAQ;;;;;;kDACnD,+YAAC;wCAAI,WAAW,iBAAiB,WAAW;;0DAC1C,+YAAC;gDAAI,WAAW,iBAAiB,SAAS;0DAAG,KAAK,KAAK;;;;;;0DACvD,+YAAC;gDAAI,WAAW,iBAAiB,QAAQ;0DACtC,KAAK,IAAI,KAAK,YAAY,MAC1B,KAAK,IAAI,KAAK,UAAU,OAAO;;;;;;;;;;;;;+BAN5B,KAAK,EAAE;;;;;wBAWrB;sCAGA,+YAAC;4BACC,SAAS;4BACT,WAAW,iBAAiB,SAAS;;8CAErC,+YAAC,uRAAA,CAAA,OAAI;oCAAC,WAAU;;;;;;8CAChB,+YAAC;8CAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMlB","debugId":null}},
    {"offset": {"line": 3295, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/CharactersView.tsx"],"sourcesContent":["'use client';\n\n// 캐릭터 뷰\n\nimport React, { useState } from 'react';\nimport { ProjectCharacter } from '../../../../shared/types';\nimport { Plus, Edit3, Save, X as XIcon } from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\n\ninterface CharactersViewProps {\n  projectId: string;\n  characters: ProjectCharacter[];\n  onCharactersChange: (characters: ProjectCharacter[]) => void;\n}\n\n// 🔥 차분하고 전문적인 작가 도구 스타일 (11원칙 준수)\nconst CHARACTERS_STYLES = {\n  container: 'flex-1 overflow-hidden bg-white dark:bg-gray-900',\n  \n  // 🔥 깔끔한 헤더\n  header: 'p-6 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700',\n  title: 'text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2',\n  subtitle: 'text-gray-600 dark:text-gray-400',\n  \n  // 🔥 컨텐츠 영역\n  content: 'flex-1 overflow-y-auto p-6',\n  \n  // 🔥 간단한 카드 그리드\n  characterGrid: 'grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4',\n  \n  // 🔥 미니멀 카드\n  characterCard: 'group p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-sm hover:border-gray-300 dark:hover:border-gray-600 transition-all duration-200',\n  \n  // 🔥 카드 내부 요소들\n  characterHeader: 'flex items-start justify-between mb-3',\n  characterInfo: 'flex-1',\n  characterName: 'text-lg font-medium text-gray-900 dark:text-gray-100 mb-1',\n  \n  // 🔥 간단한 역할 배지\n  characterRole: 'inline-flex items-center px-2 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded',\n  \n  characterNotes: 'text-gray-600 dark:text-gray-400 text-sm mt-2 line-clamp-3',\n  \n  // 🔥 간단한 추가 버튼\n  addButton: 'group flex flex-col items-center justify-center gap-2 p-6 bg-white dark:bg-gray-800 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-blue-500 dark:hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-all duration-200 cursor-pointer',\n  \n  addButtonIcon: 'w-5 h-5 text-gray-400 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-colors',\n  addButtonText: 'text-sm font-medium text-gray-600 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors',\n  \n  // 🔥 편집 버튼\n  editButton: 'p-1.5 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded transition-colors',\n  saveButton: 'p-1.5 text-gray-400 hover:text-green-600 dark:hover:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 rounded transition-colors',\n  cancelButton: 'p-1.5 text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors',\n  \n  // 🔥 편집 인풋\n  editInput: 'w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500',\n  editTextarea: 'w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500 resize-none',\n} as const;\n\nexport function CharactersView({ projectId, characters, onCharactersChange }: CharactersViewProps): React.ReactElement {\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<Partial<ProjectCharacter>>({});\n  \n  const handleAddCharacter = async (): Promise<void> => {\n    try {\n      const newCharacter: ProjectCharacter = {\n        id: Date.now().toString(),\n        projectId: characters[0]?.projectId || projectId,\n        name: '새 인물',\n        role: '역할 미정',\n        notes: '인물에 대한 설명을 추가하세요.',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      // 🔥 실제 DB에 저장\n      const result = await window.electronAPI.projects.upsertCharacter(newCharacter);\n      \n      if (result.success && result.data) {\n        // 🔥 로컬 상태 업데이트\n        onCharactersChange([...characters, result.data]);\n        setEditingId(result.data.id);\n        setEditForm(result.data);\n        Logger.info('CHARACTERS_VIEW', 'New character saved to DB', { id: result.data.id });\n      } else {\n        throw new Error(result.error || 'Failed to create character');\n      }\n    } catch (error) {\n      Logger.error('CHARACTERS_VIEW', 'Failed to create character', error);\n      alert('캐릭터 생성에 실패했습니다.');\n    }\n  };\n\n  const handleEditStart = (character: ProjectCharacter): void => {\n    setEditingId(character.id);\n    setEditForm(character);\n    Logger.debug('CHARACTERS_VIEW', 'Edit started', { id: character.id });\n  };\n\n  const handleEditSave = async (): Promise<void> => {\n    if (!editingId || !editForm) return;\n    \n    try {\n      // 🔥 실제 DB에 저장\n      const characterToSave = {\n        ...editForm,\n        id: editingId,\n        updatedAt: new Date()\n      };\n      \n      const result = await window.electronAPI.projects.upsertCharacter(characterToSave);\n      \n      if (result.success && result.data) {\n        // 🔥 로컬 상태 업데이트\n        const updatedCharacters = characters.map(char => \n          char.id === editingId ? result.data! : char\n        );\n        \n        onCharactersChange(updatedCharacters);\n        setEditingId(null);\n        setEditForm({});\n        Logger.info('CHARACTERS_VIEW', 'Character saved to DB', { id: editingId });\n      } else {\n        throw new Error(result.error || 'Failed to save character');\n      }\n    } catch (error) {\n      Logger.error('CHARACTERS_VIEW', 'Failed to save character', error);\n      // 사용자에게 에러 알림 (향후 toast 시스템 추가)\n      alert('캐릭터 저장에 실패했습니다.');\n    }\n  };\n\n  const handleEditCancel = (): void => {\n    setEditingId(null);\n    setEditForm({});\n    Logger.debug('CHARACTERS_VIEW', 'Edit cancelled');\n  };\n\n  const handleDelete = (id: string): void => {\n    const updatedCharacters = characters.filter(char => char.id !== id);\n    onCharactersChange(updatedCharacters);\n    Logger.info('CHARACTERS_VIEW', 'Character deleted', { id });\n  };\n\n  return (\n    <div className={CHARACTERS_STYLES.container}>\n      {/* 🔥 깔끔한 헤더 */}\n      <div className={CHARACTERS_STYLES.header}>\n        <h2 className={CHARACTERS_STYLES.title}>등장인물</h2>\n        <p className={CHARACTERS_STYLES.subtitle}>\n          이야기의 등장인물들을 정리하고 관리하세요\n        </p>\n      </div>\n      \n      {/* 🔥 캐릭터 목록 */}\n      <div className={CHARACTERS_STYLES.content}>\n        <div className={CHARACTERS_STYLES.characterGrid}>\n          {characters.map((character) => (\n            <div key={character.id} className={CHARACTERS_STYLES.characterCard}>\n              <div className={CHARACTERS_STYLES.characterHeader}>\n                <div className={CHARACTERS_STYLES.characterInfo}>\n                  {editingId === character.id ? (\n                    // 🔥 편집 모드\n                    <>\n                      <input\n                        type=\"text\"\n                        value={editForm.name || ''}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}\n                        className={CHARACTERS_STYLES.editInput}\n                        placeholder=\"인물 이름\"\n                      />\n                      <input\n                        type=\"text\"\n                        value={editForm.role || ''}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, role: e.target.value }))}\n                        className={`${CHARACTERS_STYLES.editInput} mt-2`}\n                        placeholder=\"역할\"\n                      />\n                      <textarea\n                        value={editForm.notes || ''}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, notes: e.target.value }))}\n                        className={`${CHARACTERS_STYLES.editTextarea} mt-2`}\n                        placeholder=\"인물 설명\"\n                        rows={3}\n                      />\n                    </>\n                  ) : (\n                    // 🔥 표시 모드\n                    <>\n                      <h3 className={CHARACTERS_STYLES.characterName}>{character.name}</h3>\n                      <span className={CHARACTERS_STYLES.characterRole}>{character.role}</span>\n                      <p className={CHARACTERS_STYLES.characterNotes}>{character.notes}</p>\n                    </>\n                  )}\n                </div>\n                \n                {/* 🔥 액션 버튼들 */}\n                <div className=\"flex gap-1\">\n                  {editingId === character.id ? (\n                    <>\n                      <button\n                        onClick={handleEditSave}\n                        className={CHARACTERS_STYLES.saveButton}\n                        title=\"저장\"\n                      >\n                        <Save size={16} />\n                      </button>\n                      <button\n                        onClick={handleEditCancel}\n                        className={CHARACTERS_STYLES.cancelButton}\n                        title=\"취소\"\n                      >\n                        <XIcon size={16} />\n                      </button>\n                    </>\n                  ) : (\n                    <button\n                      onClick={() => handleEditStart(character)}\n                      className={CHARACTERS_STYLES.editButton}\n                      title=\"편집\"\n                    >\n                      <Edit3 size={16} />\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n          \n          {/* 🔥 추가 버튼 */}\n          <button \n            onClick={handleAddCharacter}\n            className={CHARACTERS_STYLES.addButton}\n          >\n            <Plus className={CHARACTERS_STYLES.addButtonIcon} />\n            <span className={CHARACTERS_STYLES.addButtonText}>새 인물 추가</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3663, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/NotesView.tsx"],"sourcesContent":["'use client';\n\n// 노트 뷰 쓰고있음\n \nimport React, { useState } from 'react';\nimport { ProjectNote } from '../../../../shared/types';\nimport { Plus, Edit3, Save, X as XIcon, Lightbulb, Target, BookOpen } from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\n\ninterface NotesViewProps {\n  projectId: string;\n  notes?: ProjectNote[];\n  onNotesChange?: (notes: ProjectNote[]) => void;\n}\n\n// 🔥 차분하고 전문적인 노트 스타일 (11원칙 준수)\nconst NOTES_STYLES = {\n  container: 'flex-1 overflow-hidden bg-white dark:bg-gray-900',\n  \n  // 🔥 깔끔한 헤더\n  header: 'p-6 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700',\n  title: 'text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2',\n  subtitle: 'text-gray-600 dark:text-gray-400',\n  \n  // 🔥 컨텐츠 영역\n  content: 'flex-1 overflow-y-auto p-6',\n  \n  // 🔥 타입 필터\n  typeButtons: 'flex gap-2 mb-6 flex-wrap',\n  typeButton: 'flex items-center gap-2 px-3 py-2 text-sm font-medium border border-gray-200 dark:border-gray-700 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors',\n  typeButtonActive: 'bg-blue-600 text-white border-blue-600 hover:bg-blue-700',\n  \n  // 🔥 간단한 노트 그리드\n  notesGrid: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4',\n  \n  // 🔥 미니멀 노트 카드\n  noteCard: 'group p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-sm hover:border-gray-300 dark:hover:border-gray-600 transition-all duration-200',\n  \n  noteHeader: 'flex items-center gap-3 mb-3',\n  noteIcon: 'w-5 h-5 text-blue-600 dark:text-blue-400',\n  noteTitle: 'font-medium text-gray-900 dark:text-gray-100 flex-1',\n  noteContent: 'text-gray-600 dark:text-gray-400 text-sm whitespace-pre-wrap line-clamp-4',\n  noteDate: 'text-xs text-gray-500 dark:text-gray-500 mt-3',\n  \n  // 🔥 간단한 추가 버튼\n  addButton: 'group flex flex-col items-center justify-center gap-2 p-6 bg-white dark:bg-gray-800 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-blue-500 dark:hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-all duration-200 cursor-pointer min-h-[150px]',\n  addButtonIcon: 'w-6 h-6 text-gray-400 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-colors',\n  addButtonText: 'font-medium text-gray-600 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors',\n  addButtonSubtext: 'text-sm text-gray-500 dark:text-gray-500 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-colors',\n  \n  // 🔥 편집 버튼\n  editButton: 'p-1.5 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded transition-colors',\n  saveButton: 'p-1.5 text-gray-400 hover:text-green-600 dark:hover:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 rounded transition-colors',\n  cancelButton: 'p-1.5 text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors',\n  \n  // 🔥 편집 인풋\n  editInput: 'w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500',\n  editTextarea: 'w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500 resize-none',\n} as const;\n\n// 기본 메모 데이터\nconst DEFAULT_NOTES: ProjectNote[] = [\n  {\n    id: '1',\n    projectId: '',\n    title: '💡 핵심 아이디어',\n    content: '• 주인공의 숨겨진 과거\\n• 반전 포인트 3개\\n• 감정적 클라이맥스',\n    type: 'idea',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: '2',\n    projectId: '',\n    title: '🎯 스토리 목표',\n    content: '독자가 느껴야 할 감정:\\n- 긴장감\\n- 경이로움\\n- 카타르시스',\n    type: 'goal',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: '3',\n    projectId: '',\n    title: '📝 참고 자료',\n    content: '• 관련 영화: 인셉션, 매트릭스\\n• 참고 소설: 1984\\n• 연구 자료: 인공지능 윤리학',\n    type: 'reference',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\nconst NOTE_TYPES = [\n  { id: 'idea', label: '아이디어', icon: Lightbulb },\n  { id: 'goal', label: '목표', icon: Target },\n  { id: 'reference', label: '참고', icon: BookOpen },\n];\n\nexport function NotesView({ projectId, notes: propNotes, onNotesChange }: NotesViewProps): React.ReactElement {\n  const [notes, setNotes] = useState<ProjectNote[]>(\n    propNotes || DEFAULT_NOTES.map(note => ({ ...note, projectId }))\n  );\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<Partial<ProjectNote>>({});\n  \n  const handleAddNote = (): void => {\n    const newNote: ProjectNote = {\n      id: Date.now().toString(),\n      projectId,\n      title: '새 메모',\n      content: '여기에 메모를 작성하세요...',\n      type: selectedType === 'all' ? 'idea' : selectedType as 'idea' | 'goal' | 'reference',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    const updatedNotes = [...notes, newNote];\n    setNotes(updatedNotes);\n    setEditingId(newNote.id);\n    setEditForm(newNote);\n    \n    if (onNotesChange) {\n      onNotesChange(updatedNotes);\n    }\n    \n    Logger.info('NOTES_VIEW', 'New note added', { id: newNote.id });\n  };\n\n  const handleEditStart = (note: ProjectNote): void => {\n    setEditingId(note.id);\n    setEditForm(note);\n    Logger.debug('NOTES_VIEW', 'Edit started', { id: note.id });\n  };\n\n  const handleEditSave = (): void => {\n    if (!editingId || !editForm) return;\n    \n    const updatedNotes = notes.map(note => \n      note.id === editingId \n        ? { ...note, ...editForm, updatedAt: new Date() }\n        : note\n    );\n    \n    setNotes(updatedNotes);\n    setEditingId(null);\n    setEditForm({});\n    \n    if (onNotesChange) {\n      onNotesChange(updatedNotes);\n    }\n    \n    Logger.info('NOTES_VIEW', 'Note updated', { id: editingId });\n  };\n\n  const handleEditCancel = (): void => {\n    setEditingId(null);\n    setEditForm({});\n    Logger.debug('NOTES_VIEW', 'Edit cancelled');\n  };\n\n  const getTypeIcon = (type: string | undefined) => {\n    const noteType = NOTE_TYPES.find(t => t.id === type);\n    return noteType ? noteType.icon : Lightbulb;\n  };\n\n  const filteredNotes = selectedType === 'all' \n    ? notes \n    : notes.filter(note => note.type === selectedType);\n\n  return (\n    <div className={NOTES_STYLES.container}>\n      {/* 🔥 깔끔한 헤더 */}\n      <div className={NOTES_STYLES.header}>\n        <h2 className={NOTES_STYLES.title}>작가 노트</h2>\n        <p className={NOTES_STYLES.subtitle}>\n          아이디어, 목표, 참고 자료를 체계적으로 정리하세요\n        </p>\n      </div>\n      \n      {/* 🔥 노트 목록 */}\n      <div className={NOTES_STYLES.content}>\n        {/* 🔥 타입 필터 */}\n        <div className={NOTES_STYLES.typeButtons}>\n          <button\n            onClick={() => setSelectedType('all')}\n            className={`${NOTES_STYLES.typeButton} ${\n              selectedType === 'all' ? NOTES_STYLES.typeButtonActive : ''\n            }`}\n          >\n            전체\n          </button>\n          {NOTE_TYPES.map((type) => {\n            const IconComponent = type.icon;\n            return (\n              <button\n                key={type.id}\n                onClick={() => setSelectedType(type.id)}\n                className={`${NOTES_STYLES.typeButton} ${\n                  selectedType === type.id ? NOTES_STYLES.typeButtonActive : ''\n                }`}\n              >\n                <IconComponent size={16} />\n                {type.label}\n              </button>\n            );\n          })}\n        </div>\n\n        <div className={NOTES_STYLES.notesGrid}>\n          {filteredNotes.map((note) => {\n            const IconComponent = getTypeIcon(note.type);\n            \n            return (\n              <div key={note.id} className={NOTES_STYLES.noteCard}>\n                <div className={NOTES_STYLES.noteHeader}>\n                  <IconComponent className={NOTES_STYLES.noteIcon} />\n                  {editingId === note.id ? (\n                    <input\n                      type=\"text\"\n                      value={editForm.title || ''}\n                      onChange={(e) => setEditForm(prev => ({ ...prev, title: e.target.value }))}\n                      className={NOTES_STYLES.editInput}\n                      placeholder=\"메모 제목\"\n                    />\n                  ) : (\n                    <h3 className={NOTES_STYLES.noteTitle}>{note.title}</h3>\n                  )}\n                  \n                  {/* 🔥 액션 버튼들 */}\n                  <div className=\"flex gap-1\">\n                    {editingId === note.id ? (\n                      <>\n                        <button\n                          onClick={handleEditSave}\n                          className={NOTES_STYLES.saveButton}\n                          title=\"저장\"\n                        >\n                          <Save size={16} />\n                        </button>\n                        <button\n                          onClick={handleEditCancel}\n                          className={NOTES_STYLES.cancelButton}\n                          title=\"취소\"\n                        >\n                          <XIcon size={16} />\n                        </button>\n                      </>\n                    ) : (\n                      <button\n                        onClick={() => handleEditStart(note)}\n                        className={NOTES_STYLES.editButton}\n                        title=\"편집\"\n                      >\n                        <Edit3 size={16} />\n                      </button>\n                    )}\n                  </div>\n                </div>\n                \n                {editingId === note.id ? (\n                  <textarea\n                    value={editForm.content || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, content: e.target.value }))}\n                    className={NOTES_STYLES.editTextarea}\n                    placeholder=\"메모 내용\"\n                    rows={6}\n                  />\n                ) : (\n                  <p className={NOTES_STYLES.noteContent}>{note.content}</p>\n                )}\n                \n                <div className={NOTES_STYLES.noteDate}>\n                  {note.updatedAt.toLocaleDateString()}\n                </div>\n              </div>\n            );\n          })}\n          \n          {/* 🔥 추가 버튼 */}\n          <button \n            onClick={handleAddNote}\n            className={NOTES_STYLES.addButton}\n          >\n            <Plus className={NOTES_STYLES.addButtonIcon} />\n            <span className={NOTES_STYLES.addButtonText}>새 메모 추가</span>\n            <span className={NOTES_STYLES.addButtonSubtext}>\n              {selectedType === 'all' ? '아이디어를' : NOTE_TYPES.find(t => t.id === selectedType)?.label + '를'} 기록하세요\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4100, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/WriterStats.ts"],"sourcesContent":["// 🔥 작가 통계 계산 유틸리티\n\nexport interface WriterStats {\n  wordCount: number;\n  charCount: number;\n  paragraphCount: number;\n  readingTime: number;\n  wordGoal: number;\n  progress: number;\n  sessionTime: number;\n  wpm: number;\n  headingCount?: number;\n  listItemCount?: number;\n}\n\n// 🔥 작가 통계 계산\nexport const calculateWriterStats = (\n  content: string,\n  wordGoal: number,\n  sessionStartTime: number\n): WriterStats => {\n  if (!content) {\n    return {\n      wordCount: 0,\n      charCount: 0,\n      paragraphCount: 0,\n      readingTime: 0,\n      wordGoal,\n      progress: 0,\n      sessionTime: 0,\n      wpm: 0,\n      headingCount: 0,\n      listItemCount: 0\n    };\n  }\n  \n  const lines = content.split('\\n');\n  const wordCount = content.split(/\\s+/).filter(word => word.length > 0).length;\n  const charCount = content.length;\n  const paragraphCount = content.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0).length;\n  const readingTime = Math.ceil(wordCount / 200); // 분 단위 (200 WPM 기준)\n  const progress = Math.min(100, Math.round((wordCount / wordGoal) * 100));\n  \n  // 세션 시간 및 WPM 계산\n  const sessionMinutes = Math.max(1, (Date.now() - sessionStartTime) / 1000 / 60);\n  const wpm = Math.round(wordCount / sessionMinutes);\n  const sessionTime = Math.floor(sessionMinutes);\n  \n  // 마크다운 요소 카운트\n  const headingCount = lines.filter(line => line.match(/^#{1,6}\\s/)).length;\n  const listItemCount = lines.filter(line => line.match(/^[\\s]*[-*+]\\s/)).length;\n  \n  return {\n    wordCount,\n    charCount,\n    paragraphCount,\n    readingTime,\n    wordGoal,\n    progress,\n    sessionTime,\n    wpm,\n    headingCount,\n    listItemCount\n  };\n};\n\n// 🔥 시간 포맷팅 헬퍼\nexport const formatTime = (minutes: number): string => {\n  if (minutes < 60) return `${minutes}분`;\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours}시간 ${mins ? `${mins}분` : ''}`;\n};\n\n// 🔥 마지막 저장 시간 포맷팅\nexport const formatLastSaved = (lastSaved: Date | null): string => {\n  if (!lastSaved) return '저장되지 않음';\n  \n  const now = new Date();\n  const diffMs = now.getTime() - lastSaved.getTime();\n  const diffMins = Math.floor(diffMs / (1000 * 60));\n  \n  if (diffMins < 1) return '방금 전';\n  if (diffMins < 60) return `${diffMins}분 전`;\n  \n  const diffHours = Math.floor(diffMins / 60);\n  if (diffHours < 24) return `${diffHours}시간 전`;\n  \n  const diffDays = Math.floor(diffHours / 24);\n  return `${diffDays}일 전`;\n};\n\n// 🔥 글쓰기 목표 추천\nexport const getRecommendedWordGoal = (averageWordsPerDay: number): number[] => {\n  const base = Math.max(500, averageWordsPerDay);\n  return [\n    Math.round(base * 0.8),\n    base,\n    Math.round(base * 1.2),\n    Math.round(base * 1.5),\n    Math.round(base * 2.0)\n  ];\n};\n    "],"names":[],"mappings":"AAAA,mBAAmB;;;;;;;AAgBZ,MAAM,uBAAuB,CAClC,SACA,UACA;IAEA,IAAI,CAAC,SAAS;QACZ,OAAO;YACL,WAAW;YACX,WAAW;YACX,gBAAgB;YAChB,aAAa;YACb;YACA,UAAU;YACV,aAAa;YACb,KAAK;YACL,cAAc;YACd,eAAe;QACjB;IACF;IAEA,MAAM,QAAQ,QAAQ,KAAK,CAAC;IAC5B,MAAM,YAAY,QAAQ,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,GAAG,GAAG,MAAM;IAC7E,MAAM,YAAY,QAAQ,MAAM;IAChC,MAAM,iBAAiB,QAAQ,KAAK,CAAC,WAAW,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,GAAG,MAAM,GAAG,GAAG,MAAM;IACvF,MAAM,cAAc,KAAK,IAAI,CAAC,YAAY,MAAM,oBAAoB;IACpE,MAAM,WAAW,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,AAAC,YAAY,WAAY;IAEnE,iBAAiB;IACjB,MAAM,iBAAiB,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,gBAAgB,IAAI,OAAO;IAC5E,MAAM,MAAM,KAAK,KAAK,CAAC,YAAY;IACnC,MAAM,cAAc,KAAK,KAAK,CAAC;IAE/B,cAAc;IACd,MAAM,eAAe,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,cAAc,MAAM;IACzE,MAAM,gBAAgB,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,kBAAkB,MAAM;IAE9E,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;AAGO,MAAM,aAAa,CAAC;IACzB,IAAI,UAAU,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC;IACtC,MAAM,QAAQ,KAAK,KAAK,CAAC,UAAU;IACnC,MAAM,OAAO,UAAU;IACvB,OAAO,GAAG,MAAM,GAAG,EAAE,OAAO,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI;AAC/C;AAGO,MAAM,kBAAkB,CAAC;IAC9B,IAAI,CAAC,WAAW,OAAO;IAEvB,MAAM,MAAM,IAAI;IAChB,MAAM,SAAS,IAAI,OAAO,KAAK,UAAU,OAAO;IAChD,MAAM,WAAW,KAAK,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE;IAE/C,IAAI,WAAW,GAAG,OAAO;IACzB,IAAI,WAAW,IAAI,OAAO,GAAG,SAAS,GAAG,CAAC;IAE1C,MAAM,YAAY,KAAK,KAAK,CAAC,WAAW;IACxC,IAAI,YAAY,IAAI,OAAO,GAAG,UAAU,IAAI,CAAC;IAE7C,MAAM,WAAW,KAAK,KAAK,CAAC,YAAY;IACxC,OAAO,GAAG,SAAS,GAAG,CAAC;AACzB;AAGO,MAAM,yBAAyB,CAAC;IACrC,MAAM,OAAO,KAAK,GAAG,CAAC,KAAK;IAC3B,OAAO;QACL,KAAK,KAAK,CAAC,OAAO;QAClB;QACA,KAAK,KAAK,CAAC,OAAO;QAClB,KAAK,KAAK,CAAC,OAAO;QAClB,KAAK,KAAK,CAAC,OAAO;KACnB;AACH","debugId":null}},
    {"offset": {"line": 4182, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/hooks/useAutoSave.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useRef, useEffect } from 'react';\nimport { Logger } from '../../../../shared/logger';\n\ninterface UseAutoSaveOptions {\n  projectId: string;\n  delay?: number; // 기본값: 3.5초 (노션 스타일)\n  onSave: () => Promise<void>;\n  onSaveSuccess?: () => void;\n  onSaveError?: (error: Error) => void;\n}\n\n/**\n * 🔥 노션 스타일 자동 저장 Hook - 타이핑 중단 후 저장\n * \n * 특징:\n * - 사용자가 타이핑을 멈춘 후에만 저장 (노션 방식)\n * - 타이핑 중에는 절대 저장하지 않음\n * - 3.5초 딜레이로 여유로운 사용자 경험 제공\n * - 에러 처리 및 재시도 로직\n * - 저장 상태 추적\n */\nexport function useAutoSave({\n  projectId,\n  delay = 5000, // 🔥 5초로 증가 (글 삭제 방지 - 기가차드 수정)\n  onSave,\n  onSaveSuccess,\n  onSaveError\n}: UseAutoSaveOptions) {\n  const saveTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const isLoadingRef = useRef(false);\n  const retryCountRef = useRef(0);\n  const lastTypingTimeRef = useRef<number>(0); // 🔥 마지막 타이핑 시간 추적\n  const maxRetries = 3;\n\n  // 🔥 노션 스타일 Debounced 저장 (타이핑 중단 후에만)\n  const debouncedSave = useCallback(() => {\n    // 🔥 타이핑 시간 업데이트\n    lastTypingTimeRef.current = Date.now();\n    \n    // 기존 타이머 취소\n    if (saveTimerRef.current) {\n      clearTimeout(saveTimerRef.current);\n    }\n\n    // 새 타이머 설정 - 사용자가 타이핑을 멈춘 후에만 실행\n    saveTimerRef.current = setTimeout(async () => {\n      const timeSinceLastTyping = Date.now() - lastTypingTimeRef.current;\n      \n      // 🔥 핵심: 마지막 타이핑 후 충분한 시간이 지났는지 확인\n      if (timeSinceLastTyping < delay * 0.9) { // 딜레이의 90% 이상 대기\n        Logger.debug('AUTO_SAVE', 'Still typing, postponing save', { \n          projectId, \n          timeSinceLastTyping,\n          requiredDelay: delay \n        });\n        // 다시 스케줄링\n        debouncedSave();\n        return;\n      }\n      \n      if (isLoadingRef.current) {\n        Logger.debug('AUTO_SAVE', 'Save already in progress, skipping', { projectId });\n        return;\n      }\n\n      try {\n        isLoadingRef.current = true;\n        const startTime = Date.now();\n        \n        Logger.debug('AUTO_SAVE', '💾 Starting auto-save (typing stopped)', { \n          projectId,\n          timeSinceLastTyping \n        });\n        \n        await onSave();\n        retryCountRef.current = 0; // 성공 시 재시도 카운터 리셋\n        \n        const duration = Date.now() - startTime;\n        Logger.info('AUTO_SAVE', '✅ Auto-save completed', { \n          projectId, \n          duration: `${duration}ms`,\n          timeSinceLastTyping\n        });\n        \n        onSaveSuccess?.();\n      } catch (error) {\n        const errorObj = error instanceof Error ? error : new Error(String(error));\n        Logger.error('AUTO_SAVE', '❌ Auto-save failed', errorObj);\n        \n        // 재시도 로직\n        if (retryCountRef.current < maxRetries) {\n          retryCountRef.current++;\n          Logger.warn('AUTO_SAVE', `Retrying save (${retryCountRef.current}/${maxRetries})`, { projectId });\n          \n          // 재시도 딜레이 (2초, 4초, 8초로 점진적 증가)\n          setTimeout(() => {\n            debouncedSave();\n          }, Math.pow(2, retryCountRef.current) * 1000);\n        } else {\n          Logger.error('AUTO_SAVE', 'Max retries exceeded', { projectId });\n          onSaveError?.(errorObj);\n        }\n      } finally {\n        isLoadingRef.current = false;\n        saveTimerRef.current = null;\n      }\n    }, delay);\n  }, [projectId, delay, onSave, onSaveSuccess, onSaveError]);\n\n  // 🔥 즉시 저장 (Ctrl+S용)\n  const forceSave = useCallback(async () => {\n    // 기존 debounced 저장 취소\n    if (saveTimerRef.current) {\n      clearTimeout(saveTimerRef.current);\n      saveTimerRef.current = null;\n    }\n\n    if (isLoadingRef.current) {\n      Logger.debug('AUTO_SAVE', 'Save already in progress, cannot force save', { projectId });\n      return;\n    }\n\n    try {\n      isLoadingRef.current = true;\n      const startTime = Date.now();\n      \n      Logger.info('AUTO_SAVE', 'Starting force save', { projectId });\n      \n      await onSave();\n      retryCountRef.current = 0;\n      \n      const duration = Date.now() - startTime;\n      Logger.info('AUTO_SAVE', '✅ Force save completed', { \n        projectId, \n        duration: `${duration}ms` \n      });\n      \n      onSaveSuccess?.();\n    } catch (error) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      Logger.error('AUTO_SAVE', '❌ Force save failed', errorObj);\n      onSaveError?.(errorObj);\n    } finally {\n      isLoadingRef.current = false;\n    }\n  }, [projectId, onSave, onSaveSuccess, onSaveError]);\n\n  // 🔥 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      if (saveTimerRef.current) {\n        clearTimeout(saveTimerRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    debouncedSave,\n    forceSave,\n    isLoading: isLoadingRef.current,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4331, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/hooks/useProjectData.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Logger } from '../../../../shared/logger';\nimport { calculateWriterStats, type WriterStats as WriterStatsType } from '../editor/WriterStats';\nimport { useAutoSave } from './useAutoSave';\nimport { ProjectCharacter, ProjectStructure, ProjectNote } from '../../../../shared/types';\n\n// 저장 상태 타입\ntype SaveStatus = 'unsaved' | 'saving' | 'saved' | 'error';\n\ninterface UseProjectDataReturn {\n  // 🔥 로딩 및 에러 상태\n  isLoading: boolean;\n  error: string | null;\n  \n  // 프로젝트 상태\n  title: string;\n  setTitle: (title: string) => void;\n  content: string;\n  setContent: (content: string) => void;\n  lastSaved: Date | null;\n  saveStatus: SaveStatus;\n  \n  // 작가 데이터\n  characters: ProjectCharacter[];\n  setCharacters: (characters: ProjectCharacter[]) => void;\n  structure: ProjectStructure[];\n  setStructure: (structure: ProjectStructure[]) => void;\n  notes: ProjectNote[]; // 🔥 notes 추가\n  setNotes: (notes: ProjectNote[]) => void; // 🔥 setNotes 추가\n  writerStats: WriterStatsType;\n  \n  // 액션\n  loadProject: () => Promise<void>;\n  saveProject: () => Promise<void>;\n  forceSave: () => Promise<void>; // 🔥 즉시 저장 (Ctrl+S)\n  updateWriterStats: () => void;\n  setWordGoal: (goal: number) => void;\n}\n\nexport function useProjectData(projectId: string): UseProjectDataReturn {\n  const sessionStartRef = useRef<number>(Date.now());\n  \n  // 🔥 성능 최적화: 기본 날짜 메모이제이션 (new Date() 반복 생성 방지)\n  const defaultDate = useMemo(() => new Date(), []);\n  \n  // 🔥 성능 최적화: 기본 데이터 메모이제이션 (중복 객체 생성 방지)\n  const defaultCharacters = useMemo(() => [\n    { \n      id: '1', \n      projectId: projectId,\n      name: '주인공', \n      role: '주요 인물', \n      notes: '용감하고 정의로운 성격',\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '2', \n      projectId: projectId,\n      name: '조력자', \n      role: '조력자', \n      notes: '지혜롭고 경험이 많음',\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '3', \n      projectId: projectId,\n      name: '적대자', \n      role: '적대자', \n      notes: '야망이 크고 냉혹함',\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n  ], [projectId, defaultDate]);\n\n  const defaultNotes = useMemo(() => [\n    { \n      id: '1', \n      projectId: projectId,\n      title: '첫 번째 메모',\n      content: '이야기의 핵심 아이디어를 여기에 적어보세요.',\n      tags: ['아이디어'],\n      color: '#3b82f6',\n      isPinned: false,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '2', \n      projectId: projectId,\n      title: '설정 노트',\n      content: '세계관, 배경 설정에 대한 내용을 정리합니다.',\n      tags: ['설정', '세계관'],\n      color: '#10b981',\n      isPinned: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n  ], [projectId, defaultDate]);\n\n  const defaultStructure = useMemo(() => [\n    { \n      id: '1', \n      projectId: projectId,\n      type: 'chapter' as const, \n      title: '1장: 시작',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '2', \n      projectId: projectId,\n      type: 'scene' as const, \n      title: '첫 번째 장면',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '3', \n      projectId: projectId,\n      type: 'scene' as const, \n      title: '두 번째 장면',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '4', \n      projectId: projectId,\n      type: 'chapter' as const, \n      title: '2장: 전개',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '5', \n      projectId: projectId,\n      type: 'scene' as const, \n      title: '세 번째 장면',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    { \n      id: '6', \n      projectId: projectId,\n      type: 'note' as const, \n      title: '아이디어 메모',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n  ], [projectId, defaultDate]);\n  \n  // 🔥 로딩 및 에러 상태 추가\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // 🔥 기본 프로젝트 상태\n  const [title, setTitle] = useState<string>('');\n  const [content, setContent] = useState<string>('');\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [saveStatus, setSaveStatus] = useState<SaveStatus>('saved');\n  \n  // 🔥 ref로 최신 값 추적 (성능 최적화: useEffect 제거)\n  const titleRef = useRef<string>('');\n  const contentRef = useRef<string>('');\n  \n  // 🔥 최적화: setter에서 직접 ref 업데이트 (useEffect 불필요)\n  const setTitleOptimized = useCallback((newTitle: string) => {\n    titleRef.current = newTitle;\n    setTitle(newTitle);\n  }, []);\n  \n  const setContentOptimized = useCallback((newContent: string) => {\n    contentRef.current = newContent;\n    setContent(newContent);\n  }, []);\n  \n  // 🔥 작가 데이터\n  const [characters, setCharacters] = useState<ProjectCharacter[]>([]);\n  const [structure, setStructure] = useState<ProjectStructure[]>([]);\n  const [notes, setNotes] = useState<ProjectNote[]>([]); // 🔥 notes 상태 추가\n  const [writerStats, setWriterStats] = useState<WriterStatsType>({\n    wordCount: 0,\n    charCount: 0,\n    paragraphCount: 0,\n    readingTime: 0,\n    wordGoal: 1000,\n    progress: 0,\n    sessionTime: 0,\n    wpm: 0\n  });\n\n  // 🔥 프로젝트 로드 (무한루프 방지)\n  const loadProject = useCallback(async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      Logger.debug('PROJECT_DATA', 'Loading project', { projectId });\n      \n      const result = await window.electronAPI.projects.getById(projectId);\n      if (result.success && result.data) {\n        setTitle(result.data.title);\n        setContent(result.data.content);\n        setLastSaved(new Date(result.data.lastModified));\n        setSaveStatus('saved'); // 🔥 저장 상태 업데이트\n        \n        // 🔥 실제 데이터 로드 - 캐릭터 데이터\n        try {\n          const charactersResult = await window.electronAPI.projects.getCharacters(projectId);\n          if (charactersResult.success && charactersResult.data) {\n            setCharacters(charactersResult.data);\n            Logger.debug('PROJECT_DATA', 'Characters loaded successfully', { count: charactersResult.data.length });\n          } else {\n            Logger.warn('PROJECT_DATA', 'No characters found, using defaults');\n            // 기본 캐릭터 데이터\n            setCharacters(defaultCharacters);\n          }\n        } catch (error) {\n          Logger.warn('PROJECT_DATA', 'Failed to load characters, using defaults', error);\n          setCharacters(defaultCharacters);\n        }\n        \n        // 🔥 실제 데이터 로드 - 구조 데이터\n        try {\n          const structureResult = await window.electronAPI.projects.getStructure(projectId);\n          if (structureResult.success && structureResult.data) {\n            setStructure(structureResult.data);\n            Logger.debug('PROJECT_DATA', 'Structure loaded successfully', { count: structureResult.data.length });\n          } else {\n            Logger.warn('PROJECT_DATA', 'No structure found, using defaults');\n            // 기본 구조 데이터\n            setStructure(defaultStructure);\n          }\n        } catch (error) {\n          Logger.warn('PROJECT_DATA', 'Failed to load structure, using defaults', error);\n          setStructure(defaultStructure);\n        }\n        \n        // 🔥 실제 데이터 로드 - 노트 데이터\n        try {\n          const notesResult = await window.electronAPI.projects.getNotes(projectId);\n          if (notesResult.success && notesResult.data) {\n            setNotes(notesResult.data);\n            Logger.debug('PROJECT_DATA', 'Notes loaded successfully', { count: notesResult.data.length });\n          } else {\n            Logger.warn('PROJECT_DATA', 'No notes found, using defaults');\n            // 기본 노트 데이터\n            setNotes(defaultNotes);\n          }\n        } catch (error) {\n          Logger.warn('PROJECT_DATA', 'Failed to load notes, using defaults', error);\n          setNotes(defaultNotes);\n        }\n        \n        Logger.info('PROJECT_DATA', 'Project loaded successfully');\n      } else {\n        throw new Error(result.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error loading project', error);\n      setError(error instanceof Error ? error.message : 'Failed to load project');\n      \n      // 🔥 실패 시 로컬 백업 확인\n      try {\n        const backup = localStorage.getItem(`project_backup_${projectId}`);\n        if (backup) {\n          const backupData = JSON.parse(backup);\n          setTitle(backupData.title || '');\n          setContent(backupData.content || '');\n          setSaveStatus('unsaved');\n          Logger.info('PROJECT_DATA', 'Loaded from local backup');\n        }\n      } catch (storageError) {\n        Logger.error('PROJECT_DATA', 'Failed to load backup', storageError);\n      }\n    } finally {\n      setIsLoading(false); // 🔥 무조건 로딩 상태 해제\n    }\n  }, [projectId]);\n\n  // 🔥 프로젝트 저장 함수 (ref로 무한루프 방지)\n  const saveProjectInternal = useCallback(async (): Promise<void> => {\n    try {\n      const currentTitle = titleRef.current;\n      const currentContent = contentRef.current;\n      \n      if (!currentTitle.trim() && !currentContent.trim()) return;\n      \n      Logger.debug('PROJECT_DATA', 'Saving project to server', { projectId });\n      \n      // 🔥 로컬 백업 먼저 저장 (즉시)\n      try {\n        const backupData = { title: currentTitle, content: currentContent, lastModified: new Date() };\n        localStorage.setItem(`project_backup_${projectId}`, JSON.stringify(backupData));\n        Logger.debug('PROJECT_DATA', 'Local backup saved');\n      } catch (storageError) {\n        Logger.warn('PROJECT_DATA', 'Failed to save local backup', storageError);\n      }\n      \n      // 🔥 즉시 서버 저장\n      const result = await window.electronAPI.projects.update(projectId, {\n        title: currentTitle,\n        content: currentContent,\n        lastModified: new Date()\n      });\n      \n      if (result.success) {\n        setLastSaved(new Date());\n        setSaveStatus('saved');\n        Logger.info('PROJECT_DATA', 'Project saved successfully to server');\n        \n        // 성공 시 로컬 백업 제거\n        try {\n          localStorage.removeItem(`project_backup_${projectId}`);\n        } catch (e) {\n          // 무시\n        }\n      } else {\n        throw new Error(result.error || 'Failed to save project');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error saving project', error);\n      setSaveStatus('error');\n      throw error;\n    }\n  }, [projectId]); // 🔥 projectId만 dependency로 설정\n\n  // 🔥 노션 스타일 autoSave Hook 사용 - 타이핑 중단 후 저장\n  const { debouncedSave, forceSave, isLoading: isSaving } = useAutoSave({\n    projectId,\n    delay: 3000, // 🔥 3초 딜레이 (더 안전한 타이핑) - 타이핑 멈춘 후에만 저장\n    onSave: saveProjectInternal,\n    onSaveSuccess: () => {\n      setSaveStatus('saved');\n      setLastSaved(new Date());\n      Logger.info('PROJECT_DATA', '✅ 자동 저장 완료', { projectId });\n    },\n    onSaveError: (error: Error) => {\n      setSaveStatus('error');\n      Logger.error('PROJECT_DATA', '❌ 자동 저장 실패', { error: error.message, projectId });\n      \n      // 에러 발생 시 로컬 백업 생성\n      try {\n        localStorage.setItem(`project_backup_${projectId}`, JSON.stringify({ title, content }));\n        Logger.info('PROJECT_DATA', '📦 로컬 백업 저장됨', { projectId });\n      } catch (backupError) {\n        Logger.error('PROJECT_DATA', '❌ 로컬 백업 실패', backupError);\n      }\n    }\n  });\n\n  // 🔥 호환성을 위한 saveProject 함수\n  const saveProject = useCallback(async (): Promise<void> => {\n    await forceSave();\n  }, [forceSave]);\n  \n  // 🔥 비용이 큰 통계 계산을 메모이제이션 (Hook 규칙 준수)\n  const memoizedStats = useMemo(() => {\n    if (!content) return writerStats;\n    return calculateWriterStats(content, writerStats.wordGoal, sessionStartRef.current);\n  }, [content, writerStats.wordGoal, writerStats]);\n\n  // 🔥 작가 통계 업데이트 (메모이제이션된 값 사용)\n  const updateWriterStats = useCallback((): void => {\n    setWriterStats(memoizedStats);\n  }, [memoizedStats]);\n  \n  const setWordGoal = useCallback((goal: number): void => {\n    setWriterStats((prev: WriterStatsType) => ({\n      ...prev,\n      wordGoal: goal,\n      progress: Math.min(100, Math.round((prev.wordCount / goal) * 100))\n    }));\n  }, []);\n\n  // 🔥 프로젝트 초기 로드 (성능 최적화: loadProject를 useRef로 안전하게 관리)\n  const loadProjectRef = useRef(loadProject);\n  loadProjectRef.current = loadProject;\n  \n  useEffect(() => {\n    if (projectId) {\n      loadProjectRef.current();\n    }\n  }, [projectId]); // 🔥 projectId만 dependency로 - 무한루프 완전 방지\n\n  // 🔥 자동 저장 시스템 (성능 최적화: ref로 무한루프 방지)\n  const debouncedSaveRef = useRef(debouncedSave);\n  debouncedSaveRef.current = debouncedSave;\n  \n  useEffect(() => {\n    if (title.trim() || content.trim()) {\n      setSaveStatus('unsaved');\n      debouncedSaveRef.current(); // ref를 통해 안전하게 호출\n    }\n  }, [title, content]); // 🔥 debouncedSave dependency 완전 제거\n\n  // 🔥 저장 중 상태 관리\n  useEffect(() => {\n    if (isSaving) {\n      setSaveStatus('saving');\n    }\n  }, [isSaving]);\n\n  // 🔥 통계 업데이트 (기가차드 수정: interval 제거로 커서 리셋 완전 해결)\n  useEffect(() => {\n    updateWriterStats();\n    // 🔥 30초 interval 완전 제거 - 커서 리셋 원인 제거\n    // 세션 시간은 사용자가 통계를 볼 때만 계산하도록 변경\n  }, []); // 🔥 dependency 완전 제거 - useEffect 지옥 해결\n\n  // 🔥 캐릭터 저장 함수\n  const saveCharacters = useCallback(async (charactersToSave: ProjectCharacter[]): Promise<void> => {\n    try {\n      Logger.debug('PROJECT_DATA', 'Saving characters', { count: charactersToSave.length });\n      \n      // 🔥 실제 API 호출\n      const result = await window.electronAPI.projects.updateCharacters(projectId, charactersToSave);\n      \n      if (result.success) {\n        Logger.info('PROJECT_DATA', 'Characters saved successfully');\n      } else {\n        throw new Error(result.error || 'Failed to save characters');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error saving characters', error);\n      throw error;\n    }\n  }, [projectId]);\n\n  // 🔥 메모 저장 함수\n  const saveNotes = useCallback(async (notesToSave: ProjectNote[]): Promise<void> => {\n    try {\n      Logger.debug('PROJECT_DATA', 'Saving notes', { count: notesToSave.length });\n      \n      // 🔥 실제 API 호출\n      const result = await window.electronAPI.projects.updateNotes(projectId, notesToSave);\n      \n      if (result.success) {\n        Logger.info('PROJECT_DATA', 'Notes saved successfully');\n      } else {\n        throw new Error(result.error || 'Failed to save notes');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error saving notes', error);\n      throw error;\n    }\n  }, [projectId]);\n\n  // 🔥 캐릭터 변경 핸들러 (자동 저장 포함)\n  const handleCharactersChange = useCallback(async (newCharacters: ProjectCharacter[]): Promise<void> => {\n    setCharacters(newCharacters);\n    \n    try {\n      await saveCharacters(newCharacters);\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Failed to save characters automatically', error);\n      // 사용자에게 에러 표시할 수 있음\n    }\n  }, [saveCharacters]);\n\n  // 🔥 메모 변경 핸들러 (자동 저장 포함)  \n  const handleNotesChange = useCallback(async (newNotes: ProjectNote[]): Promise<void> => {\n    setNotes(newNotes);\n    \n    try {\n      await saveNotes(newNotes);\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Failed to save notes automatically', error);\n      // 사용자에게 에러 표시할 수 있음\n    }\n  }, [saveNotes]);\n\n  return {\n    // 🔥 로딩 및 에러 상태\n    isLoading,\n    error,\n    \n    // 🔥 기본 프로젝트 데이터 (성능 최적화된 setter)\n    title,\n    setTitle: setTitleOptimized,\n    content,\n    setContent: setContentOptimized,\n    lastSaved,\n    saveStatus,\n    \n    // 🔥 작가 데이터\n    characters,\n    setCharacters,\n    structure,\n    setStructure,\n    notes, // 🔥 notes 추가\n    setNotes, // 🔥 setNotes 추가\n    writerStats,\n    \n    // 🔥 액션 함수들\n    loadProject,\n    saveProject,\n    forceSave, // 🔥 새로운 즉시 저장 함수\n    updateWriterStats,\n    setWordGoal\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4837, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/hooks/useUIState.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback } from 'react';\nimport { Logger } from '../../../../shared/logger';\nimport { useTheme } from '../../../providers/ThemeProvider';\n\ninterface UseUIStateReturn {\n  // UI 상태\n  showLeftSidebar: boolean;\n  showRightSidebar: boolean;\n  showHeader: boolean;\n  isDarkMode: boolean;\n  isFocusMode: boolean;\n  \n  // 액션\n  toggleLeftSidebar: () => void;\n  toggleRightSidebar: () => void;\n  toggleDarkMode: () => void;\n  toggleFocusMode: () => void;\n  setShowHeader: (show: boolean) => void;\n}\n\nexport function useUIState(): UseUIStateReturn {\n  // 🔥 테마 관리를 ThemeProvider로 위임\n  const { resolvedTheme, toggleTheme } = useTheme();\n  \n  // 🔥 UI 상태 (테마 제외)\n  const [showLeftSidebar, setShowLeftSidebar] = useState<boolean>(true);\n  const [showRightSidebar, setShowRightSidebar] = useState<boolean>(false);\n  const [showHeader, setShowHeader] = useState<boolean>(true);\n  const [isFocusMode, setIsFocusMode] = useState<boolean>(false);\n\n  // 🔥 핸들러 함수들\n  const toggleLeftSidebar = useCallback((): void => {\n    setShowLeftSidebar(prev => !prev);\n    Logger.debug('UI_STATE', 'Left sidebar toggled');\n  }, []);\n  \n  const toggleRightSidebar = useCallback((): void => {\n    setShowRightSidebar(prev => !prev);\n    Logger.debug('UI_STATE', 'Right sidebar toggled');\n  }, []);\n  \n  const toggleDarkMode = useCallback((): void => {\n    toggleTheme(); // ThemeProvider의 토글 사용\n    Logger.debug('UI_STATE', 'Dark mode toggled via ThemeProvider');\n  }, [toggleTheme]);\n  \n  const toggleFocusMode = useCallback((): void => {\n    setIsFocusMode(prev => {\n      const newValue = !prev;\n      if (newValue) {\n        setShowLeftSidebar(false);\n        setShowRightSidebar(false);\n      }\n      Logger.info('UI_STATE', `Focus mode ${newValue ? 'enabled' : 'disabled'}`);\n      return newValue;\n    });\n  }, []);\n\n  return {\n    showLeftSidebar,\n    showRightSidebar,\n    showHeader,\n    isDarkMode: resolvedTheme === 'dark', // ThemeProvider에서 가져옴\n    isFocusMode,\n    toggleLeftSidebar,\n    toggleRightSidebar,\n    toggleDarkMode,\n    toggleFocusMode,\n    setShowHeader\n  };\n}"],"names":[],"mappings":";;;AAEA;AACA;AACA;AAJA;;;;AAsBO,SAAS;IACd,8BAA8B;IAC9B,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,8IAAA,CAAA,WAAQ,AAAD;IAE9C,mBAAmB;IACnB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,sWAAA,CAAA,WAAQ,AAAD,EAAW;IAChE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,sWAAA,CAAA,WAAQ,AAAD,EAAW;IAClE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,sWAAA,CAAA,WAAQ,AAAD,EAAW;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,sWAAA,CAAA,WAAQ,AAAD,EAAW;IAExD,aAAa;IACb,MAAM,oBAAoB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QACpC,mBAAmB,CAAA,OAAQ,CAAC;QAC5B,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,YAAY;IAC3B,GAAG,EAAE;IAEL,MAAM,qBAAqB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QACrC,oBAAoB,CAAA,OAAQ,CAAC;QAC7B,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,YAAY;IAC3B,GAAG,EAAE;IAEL,MAAM,iBAAiB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QACjC,eAAe,uBAAuB;QACtC,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,YAAY;IAC3B,GAAG;QAAC;KAAY;IAEhB,MAAM,kBAAkB,CAAA,GAAA,sWAAA,CAAA,cAAW,AAAD,EAAE;QAClC,eAAe,CAAA;YACb,MAAM,WAAW,CAAC;YAClB,IAAI,UAAU;gBACZ,mBAAmB;gBACnB,oBAAoB;YACtB;YACA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,YAAY,YAAY;YACzE,OAAO;QACT;IACF,GAAG,EAAE;IAEL,OAAO;QACL;QACA;QACA;QACA,YAAY,kBAAkB;QAC9B;QACA;QACA;QACA;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 4900, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/ProjectEditor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useRef, useCallback, memo, useEffect } from 'react';\nimport { MarkdownEditor } from './editor/MarkdownEditor';\nimport { EditorProvider } from './editor/EditorProvider';\nimport { ShortcutHelp } from './editor/ShortcutHelp';\nimport { WriterSidebar } from './components/WriterSidebar';\nimport { ProjectHeader } from './components/ProjectHeader'; // 🔥 새로운 모듈화된 헤더\nimport { ConfirmDeleteDialog } from './components/ConfirmDeleteDialog';\nimport { ShareDialog } from './components/ShareDialog';\nimport { WriteView } from './views/WriteView';\nimport { StructureView } from './views/StructureView';\nimport { CharactersView } from './views/CharactersView';\nimport { NotesView } from './views/NotesView';\nimport { Logger } from '../../../shared/logger';\n\n// 🔥 실제 hooks import (기가차드 수정)\nimport { useProjectData } from './hooks/useProjectData';\nimport { useUIState } from './hooks/useUIState';\n\n// 🔥 기가차드 UI 문제점 해결된 스타일\nconst WRITER_EDITOR_STYLES = {\n  // 전체 레이아웃\n  container: 'h-screen flex flex-col bg-white dark:bg-gray-900 transition-colors duration-200',\n  \n  // 헤더 (🔥 nav 중첩 문제 해결)\n  header: 'flex items-center justify-between px-4 py-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700',\n  headerLeft: 'flex items-center gap-3',\n  headerCenter: 'flex-1 max-w-md mx-auto',\n  headerRight: 'flex items-center gap-2',\n  \n  // 메인 레이아웃\n  main: 'flex flex-1 overflow-hidden',\n  \n  // 🔥 에디터 영역 수정 (한줄 문제, 스크롤 제한 해결)\n  editorContainer: 'flex-1 flex flex-col h-full bg-white dark:bg-gray-900 transition-colors duration-200',\n  editorContent: 'flex-1 min-h-0 overflow-hidden', // 🔥 min-h-0 추가로 flex 영역 제대로 잡힘\n  \n  // UI 컨트롤\n  iconButton: 'flex items-center justify-center w-9 h-9 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-600 dark:text-gray-400',\n  iconButtonActive: 'flex items-center justify-center w-9 h-9 rounded-lg bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400',\n  titleInput: 'border-none bg-transparent focus:outline-none focus:ring-0 text-lg font-medium w-full placeholder:text-gray-400 dark:placeholder:text-gray-500 text-gray-900 dark:text-gray-100',\n  \n  // 🔥 백 버튼 개선 (중첩 문제 해결)\n  backButton: 'flex items-center gap-2 px-3 py-1.5 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors',\n} as const;\n\nexport interface ProjectEditorProps {\n  projectId: string;\n}\n\n// 🔥 React.memo로 무한 리렌더링 방지 (11원칙: 성능 최적화)\nexport const ProjectEditor = memo(function ProjectEditor({ projectId }: ProjectEditorProps): React.ReactElement {\n  console.log('🔥 ProjectEditor render started', { projectId }); // 🔥 디버그 로그\n  \n  // 🔥 커스텀 hooks 사용\n  const { isLoading, error, ...projectData } = useProjectData(projectId);\n  const uiState = useUIState();\n  const [currentView, setCurrentView] = useState<string>('write'); // 🔥 실제 뷰 상태 관리\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState<boolean>(false);\n  const [showShareDialog, setShowShareDialog] = useState<boolean>(false);\n  const editorRef = useRef<any>(null);\n  const [isEditorReady, setIsEditorReady] = useState<boolean>(false); // 🔥 에디터 준비 상태 추가\n  \n  // 🔥 에디터 준비 완료 핸들러 (fallback 에디터용)\n  const handleEditorReady = useCallback((editor?: any) => {\n    if (editor) {\n      editorRef.current = editor;\n    }\n    setIsEditorReady(true); // 🔥 에디터 준비 완료 표시\n    Logger.info('PROJECT_EDITOR', 'Editor ready (fallback mode)');\n  }, []);\n\n  const handleBack = useCallback(() => window.history.back(), []);\n  const handleToggleSidebar = useCallback(() => setCollapsed((prev) => !prev), []);\n  \n  // 🔥 공유 기능 핸들러\n  const handleShare = useCallback(() => {\n    setShowShareDialog(true);\n    Logger.info('PROJECT_EDITOR', 'Share dialog opened');\n  }, []);\n  \n  // 🔥 삭제 기능 핸들러\n  const handleDelete = useCallback(() => {\n    setShowDeleteDialog(true);\n    Logger.info('PROJECT_EDITOR', 'Delete confirmation dialog opened');\n  }, []);\n  \n  // 🔥 삭제 확인 핸들러\n  const handleConfirmDelete = useCallback(async () => {\n    try {\n      Logger.info('PROJECT_EDITOR', 'Deleting project', { projectId });\n      \n      const result = await window.electronAPI.projects.delete(projectId);\n      \n      if (result.success) {\n        Logger.info('PROJECT_EDITOR', 'Project deleted successfully');\n        setShowDeleteDialog(false);\n        // 🔥 삭제 후 대시보드로 이동\n        window.history.back();\n      } else {\n        throw new Error(result.error || 'Failed to delete project');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_EDITOR', 'Failed to delete project', error);\n      // TODO: 에러 토스트 표시\n    }\n  }, [projectId]);\n  \n  const handleDownload = useCallback(() => Logger.info('PROJECT_EDITOR', 'Download action'), []);\n  // 🔥 뷰 변경 핸들러 (실제 구현)\n  const handleViewChange = useCallback((view: string) => {\n    Logger.info('PROJECT_EDITOR', 'View changed:', view);\n    setCurrentView(view);\n  }, []);\n  const handleToolbarAction = useCallback((action: string) => Logger.info('PROJECT_EDITOR', 'Toolbar action:', action), []);\n  \n  // 🔥 작가 친화적 키보드 단축키 핸들러\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    const { key, ctrlKey, metaKey, shiftKey, altKey } = event;\n    const modKey = ctrlKey || metaKey; // Windows: Ctrl, Mac: Cmd\n    \n    // 🔥 기본 저장 단축키 (Ctrl+S / Cmd+S)\n    if (modKey && key === 's') {\n      event.preventDefault();\n      projectData.forceSave();\n      Logger.info('PROJECT_EDITOR', 'Save shortcut triggered');\n      return;\n    }\n    \n    // 🔥 포커스 모드 토글 (Ctrl+F / Cmd+F)\n    if (modKey && key === 'f') {\n      event.preventDefault();\n      uiState.toggleFocusMode();\n      Logger.info('PROJECT_EDITOR', 'Focus mode shortcut triggered');\n      return;\n    }\n    \n    // 🔥 사이드바 토글 (Ctrl+B / Cmd+B)\n    if (modKey && key === 'b') {\n      event.preventDefault();\n      setCollapsed(prev => !prev);\n      Logger.info('PROJECT_EDITOR', 'Sidebar shortcut triggered');\n      return;\n    }\n    \n    // 🔥 다크모드 토글 (Ctrl+D / Cmd+D)\n    if (modKey && key === 'd') {\n      event.preventDefault();\n      uiState.toggleDarkMode();\n      Logger.info('PROJECT_EDITOR', 'Dark mode shortcut triggered');\n      return;\n    }\n    \n    // 🔥 뒤로가기 (Esc)\n    if (key === 'Escape') {\n      handleBack();\n      Logger.info('PROJECT_EDITOR', 'Back shortcut triggered');\n      return;\n    }\n    \n    // 🔥 단축키 도움말 (F1)\n    if (key === 'F1') {\n      event.preventDefault();\n      const helpEvent = new CustomEvent('shortcut:help');\n      window.dispatchEvent(helpEvent);\n      Logger.info('PROJECT_EDITOR', 'Help shortcut triggered');\n      return;\n    }\n  }, [projectData.forceSave, uiState.toggleFocusMode, uiState.toggleDarkMode, handleBack]);\n  \n  // 🔥 키보드 이벤트 리스너 등록\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n  \n  // 🔥 에디터 저장 이벤트 리스너 (Ctrl+S에서 발생)\n  useEffect(() => {\n    const handleProjectSave = () => {\n      projectData.forceSave();\n      Logger.info('PROJECT_EDITOR', 'Project save triggered from editor');\n    };\n    \n    window.addEventListener('project:save', handleProjectSave);\n    return () => window.removeEventListener('project:save', handleProjectSave);\n  }, [projectData.forceSave]);\n  \n  // 🔥 데이터 로딩 상태를 기준으로 로딩 화면 표시 (무한 로딩 문제 해결)\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-white dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">프로젝트를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"h-screen flex items-center justify-center text-red-500\">오류: {error}</div>;\n  }\n\n  return (\n    <EditorProvider>\n      <div className={WRITER_EDITOR_STYLES.container}>\n        {/* 🔥 모듈화된 ProjectHeader 사용 */}\n        <ProjectHeader\n          title={projectData.title}\n          onTitleChange={projectData.setTitle}\n          onBack={handleBack}\n          sidebarCollapsed={collapsed}\n          onToggleSidebar={handleToggleSidebar}\n          isFocusMode={uiState.isFocusMode}\n          onToggleFocusMode={uiState.toggleFocusMode}\n          onSave={projectData.forceSave}\n          onShare={handleShare}\n          onDownload={handleDownload}\n          onDelete={handleDelete}\n        />\n\n        {/* 🔥 메인 영역 */}\n        <div className={WRITER_EDITOR_STYLES.main}>\n          {/* 🔥 모듈화된 WriterSidebar 사용 */}\n          {!collapsed && (\n            <WriterSidebar\n              currentView={currentView}\n              onViewChange={handleViewChange}\n              structure={projectData.structure}\n              characters={projectData.characters}\n              stats={projectData.writerStats}\n              collapsed={false}\n            />\n          )}\n\n          {/* 🔥 뷰 전환 영역 - WriterSidebar와 연동 */}\n          <div className={WRITER_EDITOR_STYLES.editorContainer}>\n            {currentView === 'write' && (\n              <WriteView\n                content={projectData.content}\n                onChange={projectData.setContent}\n                isFocusMode={uiState.isFocusMode}\n              />\n            )}\n            {currentView === 'structure' && (\n              <StructureView\n                structure={projectData.structure}\n                onStructureChange={projectData.setStructure}\n              />\n            )}\n            {currentView === 'characters' && (\n              <CharactersView\n                projectId={projectId}\n                characters={projectData.characters}\n                onCharactersChange={projectData.setCharacters}\n              />\n            )}\n            {currentView === 'notes' && (\n              <NotesView\n                projectId={projectId}\n                notes={projectData.notes || []}\n                onNotesChange={projectData.setNotes}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* 🔥 단축키 도움말 (우측 하단 고정) */}\n      <ShortcutHelp />\n\n      {/* 🔥 삭제 확인 다이얼로그 */}\n      <ConfirmDeleteDialog\n        isOpen={showDeleteDialog}\n        projectTitle={projectData.title}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n\n      {/* 🔥 공유 다이얼로그 */}\n      <ShareDialog\n        isOpen={showShareDialog}\n        projectTitle={projectData.title}\n        projectId={projectId}\n        onClose={() => setShowShareDialog(false)}\n      />\n    </EditorProvider>\n  );\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5266, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/projects/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useParams } from 'next/navigation';\nimport { ProjectEditor } from '../../../components/projects/ProjectEditor';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 Next.js 15: 'use client'와 generateStaticParams 동시 사용 불가\n// 동적 라우팅이므로 클라이언트 컴포넌트로 설정\n\nexport default function ProjectPage(): React.ReactElement {\n  const params = useParams();\n  const projectId = Array.isArray(params.id) ? params.id[0] : params.id;\n\n  // 🔥 파라미터 검증\n  if (!projectId) {\n    Logger.error('PROJECT_PAGE', 'Missing project ID in route parameters');\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">오류</h1>\n          <p className=\"text-slate-600\">프로젝트 ID가 없습니다.</p>\n        </div>\n      </div>\n    );\n  }\n\n  Logger.debug('PROJECT_PAGE', 'Loading project page', { projectId });\n\n  return <ProjectEditor projectId={projectId} />;\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AALA;;;;;AAUe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,mSAAA,CAAA,YAAS,AAAD;IACvB,MAAM,YAAY,MAAM,OAAO,CAAC,OAAO,EAAE,IAAI,OAAO,EAAE,CAAC,EAAE,GAAG,OAAO,EAAE;IAErE,aAAa;IACb,IAAI,CAAC,WAAW;QACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB;QAC7B,qBACE,+YAAC;YAAI,WAAU;sBACb,cAAA,+YAAC;gBAAI,WAAU;;kCACb,+YAAC;wBAAG,WAAU;kCAAuC;;;;;;kCACrD,+YAAC;wBAAE,WAAU;kCAAiB;;;;;;;;;;;;;;;;;IAItC;IAEA,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,wBAAwB;QAAE;IAAU;IAEjE,qBAAO,+YAAC,2JAAA,CAAA,gBAAa;QAAC,WAAW;;;;;;AACnC","debugId":null}}]
}